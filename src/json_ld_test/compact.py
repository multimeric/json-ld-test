from json_ld_test.model import PositiveCompactTest, NegativeCompactTest, ContextTestCase

tests: list[ContextTestCase] = [
    PositiveCompactTest(
        name="drop free-floating nodes",
        purpose="Unreferenced nodes not containing properties are dropped",
        input="compact/0001-in.jsonld",
        expect="compact/0001-out.jsonld",
        context="compact/0001-context.jsonld",
    ),
    PositiveCompactTest(
        name="basic",
        purpose="Basic term and value compaction",
        input="compact/0002-in.jsonld",
        expect="compact/0002-out.jsonld",
        context="compact/0002-context.jsonld",
    ),
    PositiveCompactTest(
        name="drop null and unmapped properties",
        purpose="Properties mapped to null or which are never mapped are dropped",
        input="compact/0003-in.jsonld",
        expect="compact/0003-out.jsonld",
        context="compact/0003-context.jsonld",
    ),
    PositiveCompactTest(
        name="optimize @set, keep empty arrays",
        purpose="Containers mapped to @set keep empty arrays",
        input="compact/0004-in.jsonld",
        expect="compact/0004-out.jsonld",
        context="compact/0004-context.jsonld",
    ),
    PositiveCompactTest(
        name="@type and prefix compaction",
        purpose="Compact uses prefixes in @type",
        input="compact/0005-in.jsonld",
        expect="compact/0005-out.jsonld",
        context="compact/0005-context.jsonld",
    ),
    PositiveCompactTest(
        name="keep expanded object format if @type doesn't match",
        purpose="Values not matching a coerced @type remain in expanded form",
        input="compact/0006-in.jsonld",
        expect="compact/0006-out.jsonld",
        context="compact/0006-context.jsonld",
    ),
    PositiveCompactTest(
        name="add context",
        purpose="External context is added to the compacted document",
        input="compact/0007-in.jsonld",
        expect="compact/0007-out.jsonld",
        context="compact/0007-context.jsonld",
    ),
    PositiveCompactTest(
        name="alias keywords",
        purpose="Aliases for keywords are used in compacted document",
        input="compact/0008-in.jsonld",
        expect="compact/0008-out.jsonld",
        context="compact/0008-context.jsonld",
    ),
    PositiveCompactTest(
        name="compact @id",
        purpose="Value with @id is compacted to string if property cast to @id",
        input="compact/0009-in.jsonld",
        expect="compact/0009-out.jsonld",
        context="compact/0009-context.jsonld",
    ),
    PositiveCompactTest(
        name="array to @graph",
        purpose="An array of objects is serialized with @graph",
        input="compact/0010-in.jsonld",
        expect="compact/0010-out.jsonld",
        context="compact/0010-context.jsonld",
    ),
    PositiveCompactTest(
        name="compact date",
        purpose="Expanded value with type xsd:dateTime is represented as string with type coercion",
        input="compact/0011-in.jsonld",
        expect="compact/0011-out.jsonld",
        context="compact/0011-context.jsonld",
    ),
    PositiveCompactTest(
        name="native types",
        purpose="Native values are unmodified during compaction",
        input="compact/0012-in.jsonld",
        expect="compact/0012-out.jsonld",
        context="compact/0012-context.jsonld",
    ),
    PositiveCompactTest(
        name="@value with @language",
        purpose="Values with @language remain in expanded form by default",
        input="compact/0013-in.jsonld",
        expect="compact/0013-out.jsonld",
        context="compact/0013-context.jsonld",
    ),
    PositiveCompactTest(
        name="array to aliased @graph",
        purpose="Aliasing @graph uses alias in compacted document",
        input="compact/0014-in.jsonld",
        expect="compact/0014-out.jsonld",
        context="compact/0014-context.jsonld",
    ),
    PositiveCompactTest(
        name="best match compaction",
        purpose="Property with values of different types use most appropriate term when compacting",
        input="compact/0015-in.jsonld",
        expect="compact/0015-out.jsonld",
        context="compact/0015-context.jsonld",
    ),
    PositiveCompactTest(
        name="recursive named graphs",
        purpose="Compacting a document with multiple embedded uses of @graph",
        input="compact/0016-in.jsonld",
        expect="compact/0016-out.jsonld",
        context="compact/0016-context.jsonld",
    ),
    PositiveCompactTest(
        name="A term mapping to null removes the mapping",
        purpose="Mapping a term to null causes the property and its values to be removed from the compacted document",
        input="compact/0017-in.jsonld",
        expect="compact/0017-out.jsonld",
        context="compact/0017-context.jsonld",
    ),
    PositiveCompactTest(
        name="best matching term for lists",
        purpose="Lists with values of different types use best term in compacted document",
        input="compact/0018-in.jsonld",
        expect="compact/0018-out.jsonld",
        context="compact/0018-context.jsonld",
    ),
    PositiveCompactTest(
        name="Keep duplicate values in @list and @set",
        purpose="Duplicate values in @list or @set are retained in compacted document",
        input="compact/0019-in.jsonld",
        expect="compact/0019-out.jsonld",
        context="compact/0019-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact @id that is a property IRI when @container is @list",
        purpose="A term with @container: @list is also used as the value of an @id, if appropriate",
        input="compact/0020-in.jsonld",
        expect="compact/0020-out.jsonld",
        context="compact/0020-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact properties and types using @vocab",
        purpose="@vocab is used to create relative properties and types if no other term matches",
        input="compact/0021-in.jsonld",
        expect="compact/0021-out.jsonld",
        context="compact/0021-context.jsonld",
    ),
    PositiveCompactTest(
        name="@list compaction of nested properties",
        purpose="Compact nested properties using @list containers",
        input="compact/0022-in.jsonld",
        expect="compact/0022-out.jsonld",
        context="compact/0022-context.jsonld",
    ),
    PositiveCompactTest(
        name="prefer @vocab over compacted IRIs",
        purpose="@vocab takes precedence over prefixes - even if the result is longer",
        input="compact/0023-in.jsonld",
        expect="compact/0023-out.jsonld",
        context="compact/0023-context.jsonld",
    ),
    PositiveCompactTest(
        name="most specific term matching in @list.",
        purpose="The most specific term that matches all of the elements in the list, taking into account the default language, must be selected.",
        input="compact/0024-in.jsonld",
        expect="compact/0024-out.jsonld",
        context="compact/0024-context.jsonld",
    ),
    PositiveCompactTest(
        name="Language maps",
        purpose="Multiple values with different languages use language maps if property has @container: @language",
        input="compact/0025-in.jsonld",
        expect="compact/0025-out.jsonld",
        context="compact/0025-context.jsonld",
    ),
    PositiveCompactTest(
        name="Language map term selection with complications",
        purpose="Test appropriate property use given language maps with @vocab, a default language, and a competing term",
        input="compact/0026-in.jsonld",
        expect="compact/0026-out.jsonld",
        context="compact/0026-context.jsonld",
    ),
    PositiveCompactTest(
        name="@container: @set with multiple values",
        purpose="Fall back to term with @set container if term with language map is defined",
        input="compact/0027-in.jsonld",
        expect="compact/0027-out.jsonld",
        context="compact/0027-context.jsonld",
    ),
    PositiveCompactTest(
        name="Alias keywords and use @vocab",
        purpose="Combination of keyword aliases and @vocab",
        input="compact/0028-in.jsonld",
        expect="compact/0028-out.jsonld",
        context="compact/0028-context.jsonld",
    ),
    PositiveCompactTest(
        name="Simple @index map",
        purpose="Output uses index mapping if term is defined with @container: @index",
        input="compact/0029-in.jsonld",
        expect="compact/0029-out.jsonld",
        context="compact/0029-context.jsonld",
    ),
    PositiveCompactTest(
        name="non-matching @container: @index",
        purpose="Preserve @index tags if not compacted to an index map",
        input="compact/0030-in.jsonld",
        expect="compact/0030-out.jsonld",
        context="compact/0030-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact @reverse",
        purpose="Compact traverses through @reverse",
        input="compact/0031-in.jsonld",
        expect="compact/0031-out.jsonld",
        context="compact/0031-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact keys in reverse-maps",
        purpose="Compact traverses through @reverse",
        input="compact/0032-in.jsonld",
        expect="compact/0032-out.jsonld",
        context="compact/0032-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact reverse-map to reverse property",
        purpose="A reverse map is replaced with a matching property defined with @reverse",
        input="compact/0033-in.jsonld",
        expect="compact/0033-out.jsonld",
        context="compact/0033-context.jsonld",
    ),
    PositiveCompactTest(
        name="Skip property with @reverse if no match",
        purpose="Do not use reverse property if no other property matches as normal property",
        input="compact/0034-in.jsonld",
        expect="compact/0034-out.jsonld",
        context="compact/0034-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact @reverse node references using strings",
        purpose="Compact node references to strings for reverse properties using @type: @id",
        input="compact/0035-in.jsonld",
        expect="compact/0035-out.jsonld",
        context="compact/0035-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact reverse properties using index containers",
        purpose="Compact using both reverse properties and index containers",
        input="compact/0036-in.jsonld",
        expect="compact/0036-out.jsonld",
        context="compact/0036-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact keys in @reverse using @vocab",
        purpose="Compact keys in @reverse using @vocab",
        input="compact/0037-in.jsonld",
        expect="compact/0037-out.jsonld",
        context="compact/0037-context.jsonld",
    ),
    PositiveCompactTest(
        name="Index map round-tripping",
        purpose="Complex round-tripping use case from Drupal",
        input="compact/0038-in.jsonld",
        expect="compact/0038-out.jsonld",
        context="compact/0038-context.jsonld",
    ),
    PositiveCompactTest(
        name="Index map round-tripping",
        purpose="Complex round-tripping use case from Drupal",
        input="compact/0038-in.jsonld",
        expect="compact/0038a-out.jsonld",
        context="compact/0038-context.jsonld",
    ),
    PositiveCompactTest(
        name="@graph is array",
        purpose="Value of @graph is always an array",
        input="compact/0039-in.jsonld",
        expect="compact/0039-out.jsonld",
        context="compact/0039-context.jsonld",
    ),
    PositiveCompactTest(
        name="@list is array",
        purpose="Ensure that value of @list is always an array",
        input="compact/0040-in.jsonld",
        expect="compact/0040-out.jsonld",
        context="compact/0040-context.jsonld",
    ),
    PositiveCompactTest(
        name="index rejects term having @list",
        purpose="If an index is present, a term having an @list container is not selected",
        input="compact/0041-in.jsonld",
        expect="compact/0041-out.jsonld",
        context="compact/0041-context.jsonld",
    ),
    PositiveCompactTest(
        name="@list keyword aliasing",
        purpose="Make sure keyword aliasing works if a list can't be compacted",
        input="compact/0042-in.jsonld",
        expect="compact/0042-out.jsonld",
        context="compact/0042-context.jsonld",
    ),
    PositiveCompactTest(
        name="select term over @vocab",
        purpose="Ensure that @vocab compaction isn't used if the result collides with a term",
        input="compact/0043-in.jsonld",
        expect="compact/0043-out.jsonld",
        context="compact/0043-context.jsonld",
    ),
    PositiveCompactTest(
        name="@type: @vocab in reverse-map",
        purpose="Prefer properties with @type: @vocab in reverse-maps if the value can be compacted to a term",
        input="compact/0044-in.jsonld",
        expect="compact/0044-out.jsonld",
        context="compact/0044-context.jsonld",
    ),
    PositiveCompactTest(
        name="@id value uses relative IRI, not term",
        purpose="Values of @id are transformed to relative IRIs, terms are ignored",
        input="compact/0045-in.jsonld",
        expect="compact/0045-out.jsonld",
        context="compact/0045-context.jsonld",
    ),
    PositiveCompactTest(
        name="multiple objects without @context use @graph",
        purpose="Wrap top-level array into @graph even if no context is passed",
        input="compact/0046-in.jsonld",
        expect="compact/0046-out.jsonld",
        context="compact/0046-context.jsonld",
    ),
    PositiveCompactTest(
        name="Round-trip relative URLs",
        purpose="Relative URLs remain relative after compaction",
        input="compact/0047-in.jsonld",
        expect="compact/0047-out.jsonld",
        context="compact/0047-context.jsonld",
    ),
    PositiveCompactTest(
        name="term with @language: null",
        purpose="Prefer terms with a language mapping set to null over terms without language-mapping for non-strings",
        input="compact/0048-in.jsonld",
        expect="compact/0048-out.jsonld",
        context="compact/0048-context.jsonld",
    ),
    PositiveCompactTest(
        name="Round tripping of lists that contain just IRIs",
        purpose="List compaction without @container: @list still uses strings if @type: @id",
        input="compact/0049-in.jsonld",
        expect="compact/0049-out.jsonld",
        context="compact/0049-context.jsonld",
    ),
    PositiveCompactTest(
        name="Reverse properties require @type: @id to use string values",
        purpose="Node references in reverse properties are not compacted to strings without explicit type-coercion",
        input="compact/0050-in.jsonld",
        expect="compact/0050-out.jsonld",
        context="compact/0050-context.jsonld",
    ),
    PositiveCompactTest(
        name="Round tripping @list with scalar",
        purpose="Native values survive round-tripping with @list",
        input="compact/0051-in.jsonld",
        expect="compact/0051-out.jsonld",
        context="compact/0051-context.jsonld",
    ),
    PositiveCompactTest(
        name="Round tripping @list with scalar and @graph alias",
        purpose="Native values survive round-tripping with @list and @graph alias",
        input="compact/0052-in.jsonld",
        expect="compact/0052-out.jsonld",
        context="compact/0052-context.jsonld",
    ),
    PositiveCompactTest(
        name="Use @type: @vocab if no @type: @id",
        purpose="Compact to @type: @vocab when no @type: @id term available",
        input="compact/0053-in.jsonld",
        expect="compact/0053-out.jsonld",
        context="compact/0053-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact to @type: @vocab and compact @id to term",
        purpose="Compact to @type: @vocab and compact @id to term",
        input="compact/0054-in.jsonld",
        expect="compact/0054-out.jsonld",
        context="compact/0054-context.jsonld",
    ),
    PositiveCompactTest(
        name="Round tripping @type: @vocab",
        purpose="Compacting IRI value of property with @type: @vocab can use term",
        input="compact/0055-in.jsonld",
        expect="compact/0055-out.jsonld",
        context="compact/0055-context.jsonld",
    ),
    PositiveCompactTest(
        name="Prefer @type: @vocab over @type: @id for terms",
        purpose="Compacting IRI value of property with @type: @vocab can use term",
        input="compact/0056-in.jsonld",
        expect="compact/0056-out.jsonld",
        context="compact/0056-context.jsonld",
    ),
    PositiveCompactTest(
        name="Complex round tripping @type: @vocab and @type: @id",
        purpose="Compacting IRI value of property with @type: @vocab can use term; more complex",
        input="compact/0057-in.jsonld",
        expect="compact/0057-out.jsonld",
        context="compact/0057-context.jsonld",
    ),
    PositiveCompactTest(
        name="Prefer @type: @id over @type: @vocab for non-terms",
        purpose="Choose a term having @type: @id over @type: @value if value is not a term",
        input="compact/0058-in.jsonld",
        expect="compact/0058-out.jsonld",
        context="compact/0058-context.jsonld",
    ),
    PositiveCompactTest(
        name="Term with @type: @vocab if no @type: @id",
        purpose="If there's no term with @type: @id, use terms with @type: @vocab for IRIs not mapped to terms",
        input="compact/0059-in.jsonld",
        expect="compact/0059-out.jsonld",
        context="compact/0059-context.jsonld",
    ),
    PositiveCompactTest(
        name="Term with @type: @id if no @type: @vocab and term value",
        purpose="If there's no term with @type: @vocab, use terms with @type: @id for IRIs mapped to terms",
        input="compact/0060-in.jsonld",
        expect="compact/0060-out.jsonld",
        context="compact/0060-context.jsonld",
    ),
    PositiveCompactTest(
        name="@type: @vocab/@id with values matching either",
        purpose="Separate IRIs for the same property to use term with more specific @type (@id vs. @vocab)",
        input="compact/0061-in.jsonld",
        expect="compact/0061-out.jsonld",
        context="compact/0061-context.jsonld",
    ),
    PositiveCompactTest(
        name="@type: @vocab and relative IRIs",
        purpose="Relative IRIs don't round-trip with @type: @vocab",
        input="compact/0062-in.jsonld",
        expect="compact/0062-out.jsonld",
        context="compact/0062-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact IRI round-tripping with @type: @vocab",
        purpose="Term with @type: @vocab will use compact IRIs",
        input="compact/0063-in.jsonld",
        expect="compact/0063-out.jsonld",
        context="compact/0063-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact language-tagged and indexed strings to index-map",
        purpose="Given values with both @index and @language and term index-map term, use index map",
        input="compact/0064-in.jsonld",
        expect="compact/0064-out.jsonld",
        context="compact/0064-context.jsonld",
    ),
    PositiveCompactTest(
        name="Language-tagged and indexed strings with language-map",
        purpose="Language-tagged and indexed strings don't compact to language-map",
        input="compact/0065-in.jsonld",
        expect="compact/0065-out.jsonld",
        context="compact/0065-context.jsonld",
    ),
    PositiveCompactTest(
        name="Relative IRIs",
        purpose="Complex use cases for relative IRI compaction",
        input="compact/0066-in.jsonld",
        expect="compact/0066-out.jsonld",
        context="compact/0066-context.jsonld",
    ),
    PositiveCompactTest(
        name="Reverse properties with blank nodes",
        purpose="Compact reverse property whose values are unlabeled blank nodes",
        input="compact/0067-in.jsonld",
        expect="compact/0067-out.jsonld",
        context="compact/0067-context.jsonld",
    ),
    PositiveCompactTest(
        name="Single value reverse properties",
        purpose="Single values of reverse properties are compacted as values of ordinary properties",
        input="compact/0068-in.jsonld",
        expect="compact/0068-out.jsonld",
        context="compact/0068-context.jsonld",
    ),
    PositiveCompactTest(
        name="Single value reverse properties with @set",
        purpose="Single values are kept in array form for reverse properties if the container is to @set",
        input="compact/0069-in.jsonld",
        expect="compact/0069-out.jsonld",
        context="compact/0069-context.jsonld",
    ),
    PositiveCompactTest(
        name="compactArrays option",
        purpose="Setting compactArrays to false causes single element arrays to be retained",
        input="compact/0070-in.jsonld",
        expect="compact/0070-out.jsonld",
        context="compact/0070-context.jsonld",
    ),
    PositiveCompactTest(
        name="Input has multiple @contexts, output has one",
        purpose="Expanding input with multiple @contexts and compacting with just one doesn't output undefined properties",
        input="compact/0071-in.jsonld",
        expect="compact/0071-out.jsonld",
        context="compact/0071-context.jsonld",
    ),
    PositiveCompactTest(
        name="Default language and unmapped properties",
        purpose="Ensure that the default language is handled correctly for unmapped properties",
        input="compact/0072-in.jsonld",
        expect="compact/0072-out.jsonld",
        context="compact/0072-context.jsonld",
    ),
    PositiveCompactTest(
        name="Mapped @id and @type",
        purpose="Ensure that compaction works with mapped @id and @type",
        input="compact/0073-in.jsonld",
        expect="compact/0073-out.jsonld",
        context="compact/0073-context.jsonld",
    ),
    PositiveCompactTest(
        name="Container as a list with type of @id",
        purpose="Ensure that compaction works for empty list when property has container declared as @list and type as @id",
        input="compact/0074-in.jsonld",
        expect="compact/0074-out.jsonld",
        context="compact/0074-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact using relative fragment identifier",
        purpose="Compacting a relative round-trips",
        input="compact/0075-in.jsonld",
        expect="compact/0075-out.jsonld",
        context="compact/0075-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compacting IRI equivalent to base",
        purpose="Compacting IRI equivalent to base, uses last path segment of base ending in '/'",
        input="compact/0076-in.jsonld",
        expect="compact/0076-out.jsonld",
        context="compact/0076-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact a @graph container",
        purpose="Compact a @graph container",
        input="compact/0077-in.jsonld",
        expect="compact/0077-out.jsonld",
        context="compact/0077-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact a [@graph, @set] container",
        purpose="Compact with [@graph, @set]",
        input="compact/0078-in.jsonld",
        expect="compact/0078-out.jsonld",
        context="compact/0078-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact a @graph container having @index",
        purpose="Verify that having both @graph and @index allows @graph container compaction",
        input="compact/0079-in.jsonld",
        expect="compact/0079-out.jsonld",
        context="compact/0079-context.jsonld",
    ),
    PositiveCompactTest(
        name="Do not compact a graph having @id with a term having an @graph container",
        purpose="Graph compaction works only on simple graphs",
        input="compact/0080-in.jsonld",
        expect="compact/0080-out.jsonld",
        context="compact/0080-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact a [@graph, @index] container",
        purpose="Compact a @graph container with @index",
        input="compact/0081-in.jsonld",
        expect="compact/0081-out.jsonld",
        context="compact/0081-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact a [@graph, @index, @set] container",
        purpose="Compact a @graph container with @index and @set",
        input="compact/0082-in.jsonld",
        expect="compact/0082-out.jsonld",
        context="compact/0082-context.jsonld",
    ),
    PositiveCompactTest(
        name="[@graph, @index] does not compact graph with @id",
        purpose="Graph compaction with @graph and @index works only on simple graphs",
        input="compact/0083-in.jsonld",
        expect="compact/0083-out.jsonld",
        context="compact/0083-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact a simple graph with a [@graph, @id] container",
        purpose="Compact a simple graph using a @graph container with @id",
        input="compact/0084-in.jsonld",
        expect="compact/0084-out.jsonld",
        context="compact/0084-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact a named graph with a [@graph, @id] container",
        purpose="Compact a named graph using a @graph container with @id",
        input="compact/0085-in.jsonld",
        expect="compact/0085-out.jsonld",
        context="compact/0085-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact a simple graph with a [@graph, @id, @set] container",
        purpose="Compact a simple graph using a @graph container with @id and @set",
        input="compact/0086-in.jsonld",
        expect="compact/0086-out.jsonld",
        context="compact/0086-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact a named graph with a [@graph, @id, @set] container",
        purpose="Compact a named graph using a @graph container with @id and @set",
        input="compact/0087-in.jsonld",
        expect="compact/0087-out.jsonld",
        context="compact/0087-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact a graph with @index using a [@graph, @id] container",
        purpose="Compact a @graph container with @id and @set, discarding an @index value",
        input="compact/0088-in.jsonld",
        expect="compact/0088-out.jsonld",
        context="compact/0088-context.jsonld",
    ),
    PositiveCompactTest(
        name="Language map term selection with complications",
        purpose="Test appropriate property use given language maps with @vocab, a default language, no language, and competing terms",
        input="compact/0089-in.jsonld",
        expect="compact/0089-out.jsonld",
        context="compact/0089-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact input with @graph container to output without @graph container",
        purpose="Ensure @graph appears properly in output",
        input="compact/0090-in.jsonld",
        expect="compact/0090-out.jsonld",
        context="compact/0090-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact input with @graph container to output without @graph container with compactArrays unset",
        purpose="Ensure @graph appears properly in output with compactArrays unset",
        input="compact/0091-in.jsonld",
        expect="compact/0091-out.jsonld",
        context="compact/0091-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact input with [@graph, @set] container to output without [@graph, @set] container",
        purpose="Ensure @graph appears properly in output",
        input="compact/0092-in.jsonld",
        expect="compact/0092-out.jsonld",
        context="compact/0092-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact input with [@graph, @set] container to output without [@graph, @set] container with compactArrays unset",
        purpose="Ensure @graph appears properly in output with compactArrays unset",
        input="compact/0093-in.jsonld",
        expect="compact/0093-out.jsonld",
        context="compact/0093-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact input with [@graph, @set] container to output without [@graph, @set] container",
        purpose="Ensure @graph appears properly in output",
        input="compact/0094-in.jsonld",
        expect="compact/0094-out.jsonld",
        context="compact/0094-context.jsonld",
    ),
    PositiveCompactTest(
        name="Relative propererty IRIs with @vocab: ''",
        purpose="Complex use cases for relative IRI compaction or properties",
        input="compact/0095-in.jsonld",
        expect="compact/0095-out.jsonld",
        context="compact/0095-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact @graph container (multiple graphs)",
        purpose="Ensure @graph appears properly in output",
        input="compact/0096-in.jsonld",
        expect="compact/0096-out.jsonld",
        context="compact/0096-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact [@graph, @set] container (multiple graphs)",
        purpose="Ensure @graph appears properly in output",
        input="compact/0097-in.jsonld",
        expect="compact/0097-out.jsonld",
        context="compact/0097-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact [@graph, @index] container (multiple indexed objects)",
        purpose="Ensure @graph appears properly in output",
        input="compact/0098-in.jsonld",
        expect="compact/0098-out.jsonld",
        context="compact/0098-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact [@graph, @index, @set] container (multiple indexed objects)",
        purpose="Ensure @graph appears properly in output",
        input="compact/0099-in.jsonld",
        expect="compact/0099-out.jsonld",
        context="compact/0099-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact [@graph, @id] container (multiple indexed objects)",
        purpose="Ensure @graph appears properly in output",
        input="compact/0100-in.jsonld",
        expect="compact/0100-out.jsonld",
        context="compact/0100-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact [@graph, @id, @set] container (multiple indexed objects)",
        purpose="Ensure @graph appears properly in output",
        input="compact/0101-in.jsonld",
        expect="compact/0101-out.jsonld",
        context="compact/0101-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact [@graph, @index] container (multiple indexes and objects)",
        purpose="Ensure @graph appears properly in output",
        input="compact/0102-in.jsonld",
        expect="compact/0102-out.jsonld",
        context="compact/0102-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact [@graph, @id] container (multiple ids and objects)",
        purpose="Ensure @graph appears properly in output",
        input="compact/0103-in.jsonld",
        expect="compact/0103-out.jsonld",
        context="compact/0103-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact @type with @container: @set",
        purpose="Ensures that a single @type value is represented as an array",
        input="compact/0104-in.jsonld",
        expect="compact/0104-out.jsonld",
        context="compact/0104-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact @type with @container: @set using an alias of @type",
        purpose="Ensures that a single @type value is represented as an array",
        input="compact/0105-in.jsonld",
        expect="compact/0105-out.jsonld",
        context="compact/0105-context.jsonld",
    ),
    PositiveCompactTest(
        name="Do not compact @type with @container: @set to an array using an alias of @type",
        purpose="Ensures that a single @type value is not represented as an array in 1.0",
        input="compact/0106-in.jsonld",
        expect="compact/0106-out.jsonld",
        context="compact/0106-context.jsonld",
    ),
    PositiveCompactTest(
        name="Relative propererty IRIs with @vocab: ''",
        purpose="Complex use cases for relative IRI compaction or properties",
        input="compact/0107-in.jsonld",
        expect="compact/0107-out.jsonld",
        context="compact/0107-context.jsonld",
    ),
    PositiveCompactTest(
        name="context with JavaScript Object property names",
        purpose="Compact with context including JavaScript Object property names",
        input="compact/0108-in.jsonld",
        expect="compact/0108-out.jsonld",
        context="compact/0108-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact @graph container (multiple objects)",
        purpose="Multiple objects in a simple graph with a graph container need to use @included",
        input="compact/0109-in.jsonld",
        expect="compact/0109-out.jsonld",
        context="compact/0109-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact [@graph, @set] container (multiple objects)",
        purpose="Multiple objects in a simple graph with a graph container need to use @included",
        input="compact/0110-in.jsonld",
        expect="compact/0110-out.jsonld",
        context="compact/0110-context.jsonld",
    ),
    PositiveCompactTest(
        name="Keyword-like relative IRIs",
        purpose="Relative IRIs must not have the form a of keyword",
        input="compact/0111-in.jsonld",
        expect="compact/0111-out.jsonld",
        context="compact/0111-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact property index using Compact IRI index",
        purpose="With @container: @index and @index a compact IRI, ensure round-tripping of compacted representation",
        input="compact/0112-in.jsonld",
        expect="compact/0112-out.jsonld",
        context="compact/0112-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact property index using Absolute IRI index",
        purpose="With @container: @index and @index an absolute IRI, ensure round-tripping of compacted representation",
        input="compact/0113-in.jsonld",
        expect="compact/0113-out.jsonld",
        context="compact/0113-context.jsonld",
    ),
    PositiveCompactTest(
        name="Reverse term with property based indexed container",
        purpose="Compaction using a reverse term with @container indexed on a property (round-trip test of expand#t0131)",
        input="compact/0114-in.jsonld",
        expect="compact/0114-out.jsonld",
        context="compact/0114-context.jsonld",
    ),
    PositiveCompactTest(
        name="adding new term",
        purpose="Compaction using a scoped context uses term scope for selecting proper term",
        input="compact/c001-in.jsonld",
        expect="compact/c001-out.jsonld",
        context="compact/c001-context.jsonld",
    ),
    PositiveCompactTest(
        name="overriding a term",
        purpose="Compaction using a scoped context uses term scope for selecting proper term",
        input="compact/c002-in.jsonld",
        expect="compact/c002-out.jsonld",
        context="compact/c002-context.jsonld",
    ),
    PositiveCompactTest(
        name="property and value with different terms mapping to the same expanded property",
        purpose="Compaction using a scoped context uses term scope for selecting proper term",
        input="compact/c003-in.jsonld",
        expect="compact/c003-out.jsonld",
        context="compact/c003-context.jsonld",
    ),
    PositiveCompactTest(
        name="deep @context affects nested nodes",
        purpose="Compaction using a scoped context uses term scope for selecting proper term",
        input="compact/c004-in.jsonld",
        expect="compact/c004-out.jsonld",
        context="compact/c004-context.jsonld",
    ),
    PositiveCompactTest(
        name="scoped context layers on intemediate contexts",
        purpose="Compaction using a scoped context uses term scope for selecting proper term",
        input="compact/c005-in.jsonld",
        expect="compact/c005-out.jsonld",
        context="compact/c005-context.jsonld",
    ),
    PositiveCompactTest(
        name="adding new term",
        purpose="scoped context on @type",
        input="compact/c006-in.jsonld",
        expect="compact/c006-out.jsonld",
        context="compact/c006-context.jsonld",
    ),
    PositiveCompactTest(
        name="overriding a term",
        purpose="scoped context on @type",
        input="compact/c007-in.jsonld",
        expect="compact/c007-out.jsonld",
        context="compact/c007-context.jsonld",
    ),
    PositiveCompactTest(
        name="alias of @type",
        purpose="scoped context on @type",
        input="compact/c008-in.jsonld",
        expect="compact/c008-out.jsonld",
        context="compact/c008-context.jsonld",
    ),
    PositiveCompactTest(
        name="deep @type-scoped @context does NOT affect nested nodes",
        purpose="scoped context on @type",
        input="compact/c009-in.jsonld",
        expect="compact/c009-out.jsonld",
        context="compact/c009-context.jsonld",
    ),
    PositiveCompactTest(
        name="scoped context layers on intemediate contexts",
        purpose="scoped context on @type",
        input="compact/c010-in.jsonld",
        expect="compact/c010-out.jsonld",
        context="compact/c010-context.jsonld",
    ),
    PositiveCompactTest(
        name="applies context for all values",
        purpose="scoped context on @type",
        input="compact/c011-in.jsonld",
        expect="compact/c011-out.jsonld",
        context="compact/c011-context.jsonld",
    ),
    PositiveCompactTest(
        name="orders @type terms when applying scoped contexts",
        purpose="scoped context on @type",
        input="compact/c012-in.jsonld",
        expect="compact/c012-out.jsonld",
        context="compact/c012-context.jsonld",
    ),
    PositiveCompactTest(
        name="deep property-term scoped @context in @type-scoped @context affects nested nodes",
        purpose="scoped context on @type",
        input="compact/c013-in.jsonld",
        expect="compact/c013-out.jsonld",
        context="compact/c013-context.jsonld",
    ),
    PositiveCompactTest(
        name="type-scoped context nullification",
        purpose="Nullifying a type-scoped context continues to use the previous context when compacting @type.",
        input="compact/c014-in.jsonld",
        expect="compact/c014-out.jsonld",
        context="compact/c014-context.jsonld",
    ),
    PositiveCompactTest(
        name="type-scoped base",
        purpose="type-scoped base",
        input="compact/c015-in.jsonld",
        expect="compact/c015-out.jsonld",
        context="compact/c015-context.jsonld",
    ),
    PositiveCompactTest(
        name="type-scoped vocab",
        purpose="type-scoped vocab",
        input="compact/c016-in.jsonld",
        expect="compact/c016-out.jsonld",
        context="compact/c016-context.jsonld",
    ),
    PositiveCompactTest(
        name="multiple type-scoped contexts are properly reverted",
        purpose="multiple type-scoped contexts are property reverted",
        input="compact/c017-in.jsonld",
        expect="compact/c017-out.jsonld",
        context="compact/c017-context.jsonld",
    ),
    PositiveCompactTest(
        name="multiple type-scoped types resolved against previous context",
        purpose="multiple type-scoped types resolved against previous context",
        input="compact/c018-in.jsonld",
        expect="compact/c018-out.jsonld",
        context="compact/c018-context.jsonld",
    ),
    PositiveCompactTest(
        name="type-scoped context with multiple property scoped terms",
        purpose="type-scoped context with multiple property scoped terms",
        input="compact/c019-in.jsonld",
        expect="compact/c019-out.jsonld",
        context="compact/c019-context.jsonld",
    ),
    PositiveCompactTest(
        name="type-scoped value",
        purpose="type-scoped value",
        input="compact/c020-in.jsonld",
        expect="compact/c020-out.jsonld",
        context="compact/c020-context.jsonld",
    ),
    PositiveCompactTest(
        name="type-scoped value mix",
        purpose="type-scoped value mix",
        input="compact/c021-in.jsonld",
        expect="compact/c021-out.jsonld",
        context="compact/c021-context.jsonld",
    ),
    PositiveCompactTest(
        name="type-scoped property-scoped contexts including @type:@vocab",
        purpose="type-scoped property-scoped contexts including @type:@vocab",
        input="compact/c022-in.jsonld",
        expect="compact/c022-out.jsonld",
        context="compact/c022-context.jsonld",
    ),
    PositiveCompactTest(
        name="composed type-scoped property-scoped contexts including @type:@vocab",
        purpose="composed type-scoped property-scoped contexts including @type:@vocab",
        input="compact/c023-in.jsonld",
        expect="compact/c023-out.jsonld",
        context="compact/c023-context.jsonld",
    ),
    PositiveCompactTest(
        name="type-scoped + property-scoped + values evaluates against previous context",
        purpose="type-scoped + property-scoped + values evaluates against previous context",
        input="compact/c024-in.jsonld",
        expect="compact/c024-out.jsonld",
        context="compact/c024-context.jsonld",
    ),
    PositiveCompactTest(
        name="type-scoped + graph container",
        purpose="type-scoped + graph container",
        input="compact/c025-in.jsonld",
        expect="compact/c025-out.jsonld",
        context="compact/c025-context.jsonld",
    ),
    PositiveCompactTest(
        name="@propagate: true on type-scoped context",
        purpose="type-scoped context with @propagate: true survive node-objects",
        input="compact/c026-in.jsonld",
        expect="compact/c026-out.jsonld",
        context="compact/c026-context.jsonld",
    ),
    PositiveCompactTest(
        name="@propagate: false on property-scoped context",
        purpose="property-scoped context with @propagate: false do not survive node-objects",
        input="compact/c027-in.jsonld",
        expect="compact/c027-out.jsonld",
        context="compact/c027-context.jsonld",
    ),
    PositiveCompactTest(
        name="Empty-property scoped context does not affect term selection.",
        purpose="Adding a minimal/empty property-scoped context should not affect the using terms defined in outer context.",
        input="compact/c028-in.jsonld",
        expect="compact/c028-out.jsonld",
        context="compact/c028-context.jsonld",
    ),
    PositiveCompactTest(
        name="term direction null",
        purpose="Uses term with null direction when two terms conflict on direction.",
        input="compact/di01-in.jsonld",
        expect="compact/di01-out.jsonld",
        context="compact/di01-context.jsonld",
    ),
    PositiveCompactTest(
        name="use alias of @direction",
        purpose="Use alias of @direction.",
        input="compact/di02-in.jsonld",
        expect="compact/di02-out.jsonld",
        context="compact/di02-context.jsonld",
    ),
    PositiveCompactTest(
        name="term selection with lists and direction",
        purpose="Term selection includes values of @list.",
        input="compact/di03-in.jsonld",
        expect="compact/di03-out.jsonld",
        context="compact/di03-context.jsonld",
    ),
    PositiveCompactTest(
        name="simple language map with term direction",
        purpose="Term selection with language maps and @direction.",
        input="compact/di04-in.jsonld",
        expect="compact/di04-out.jsonld",
        context="compact/di04-context.jsonld",
    ),
    PositiveCompactTest(
        name="simple language map with overriding term direction",
        purpose="Term selection with language maps and @direction.",
        input="compact/di05-in.jsonld",
        expect="compact/di05-out.jsonld",
        context="compact/di05-context.jsonld",
    ),
    PositiveCompactTest(
        name="simple language map with overriding null direction",
        purpose="Term selection with language maps and @direction.",
        input="compact/di06-in.jsonld",
        expect="compact/di06-out.jsonld",
        context="compact/di06-context.jsonld",
    ),
    PositiveCompactTest(
        name="simple language map with mismatching term direction",
        purpose="Term selection with language maps and @direction.",
        input="compact/di07-in.jsonld",
        expect="compact/di07-out.jsonld",
        context="compact/di07-context.jsonld",
    ),
    NegativeCompactTest(
        name="Compaction to list of lists",
        purpose="Verifies that an exception is raised in Compaction when attempting to compact a list of lists",
        input="compact/e001-in.jsonld",
        expect_error_code="compaction to list of lists",
        context="compact/e001-context.jsonld",
    ),
    NegativeCompactTest(
        name="Absolute IRI confused with Compact IRI",
        purpose="Verifies that IRI compaction detects when the result is an absolute IRI with a scheme matching a term.",
        input="compact/e002-in.jsonld",
        expect_error_code="IRI confused with prefix",
        context="compact/e002-context.jsonld",
    ),
    NegativeCompactTest(
        name="Nest term not defined",
        purpose="Transparent Nesting",
        input="compact/en01-in.jsonld",
        expect_error_code="invalid @nest value",
        context="compact/en01-context.jsonld",
    ),
    NegativeCompactTest(
        name="processingMode json-ld-1.0 conflicts with @version: 1.1",
        purpose="If processingMode is explicitly json-ld-1.0, it will conflict with 1.1 features.",
        input="compact/ep05-in.jsonld",
        expect_error_code="processing mode conflict",
        context="compact/ep05-context.jsonld",
    ),
    NegativeCompactTest(
        name="@version must be 1.1",
        purpose="If @version is specified, it must be 1.1",
        input="compact/ep06-in.jsonld",
        expect_error_code="invalid @version value",
        context="compact/ep06-context.jsonld",
    ),
    NegativeCompactTest(
        name="@prefix is not allowed in 1.0",
        purpose="@prefix is not allowed in a term definition 1.0",
        input="compact/ep07-in.jsonld",
        expect_error_code="invalid term definition",
        context="compact/ep07-context.jsonld",
    ),
    NegativeCompactTest(
        name="@prefix must be a boolean",
        purpose="@prefix must be a boolean in a term definition in 1.1",
        input="compact/ep08-in.jsonld",
        expect_error_code="invalid @prefix value",
        context="compact/ep08-context.jsonld",
    ),
    NegativeCompactTest(
        name="@prefix not allowed on compact IRI term",
        purpose="If processingMode is json-ld-1.0, or if term contains a colon (:), an invalid term definition has been detected and processing is aborted.",
        input="compact/ep09-in.jsonld",
        expect_error_code="invalid term definition",
        context="compact/ep09-context.jsonld",
    ),
    NegativeCompactTest(
        name="@nest is not allowed in 1.0",
        purpose="@nest is not allowed in a term definitionin 1.0",
        input="compact/ep10-in.jsonld",
        expect_error_code="invalid term definition",
        context="compact/ep10-context.jsonld",
    ),
    NegativeCompactTest(
        name="@context is not allowed in 1.0",
        purpose="@context is not allowed in a term definitionin 1.0",
        input="compact/ep11-in.jsonld",
        expect_error_code="invalid term definition",
        context="compact/ep11-context.jsonld",
    ),
    NegativeCompactTest(
        name="@container may not be an array in 1.0",
        purpose="validate appropriate values of @container",
        input="compact/ep12-in.jsonld",
        expect_error_code="invalid container mapping",
        context="compact/ep12-context.jsonld",
    ),
    NegativeCompactTest(
        name="@container may not be @id in 1.0",
        purpose="validate appropriate values of @container",
        input="compact/ep13-in.jsonld",
        expect_error_code="invalid container mapping",
        context="compact/ep13-context.jsonld",
    ),
    NegativeCompactTest(
        name="@container may not be @type in 1.0",
        purpose="validate appropriate values of @container",
        input="compact/ep14-in.jsonld",
        expect_error_code="invalid container mapping",
        context="compact/ep14-context.jsonld",
    ),
    NegativeCompactTest(
        name="@container may not be @graph in 1.0",
        purpose="validate appropriate values of @container",
        input="compact/ep15-in.jsonld",
        expect_error_code="invalid container mapping",
        context="compact/ep15-context.jsonld",
    ),
    PositiveCompactTest(
        name="Basic Included array",
        purpose="Tests included blocks.",
        input="compact/in01-in.jsonld",
        expect="compact/in01-out.jsonld",
        context="compact/in01-context.jsonld",
    ),
    PositiveCompactTest(
        name="Basic Included object",
        purpose="Tests included blocks.",
        input="compact/in02-in.jsonld",
        expect="compact/in02-out.jsonld",
        context="compact/in02-context.jsonld",
    ),
    PositiveCompactTest(
        name="Multiple properties mapping to @included are folded together",
        purpose="Tests included blocks.",
        input="compact/in03-in.jsonld",
        expect="compact/in03-out.jsonld",
        context="compact/in03-context.jsonld",
    ),
    PositiveCompactTest(
        name="Included containing @included",
        purpose="Tests included blocks.",
        input="compact/in04-in.jsonld",
        expect="compact/in04-out.jsonld",
        context="compact/in04-context.jsonld",
    ),
    PositiveCompactTest(
        name="Property value with @included",
        purpose="Tests included blocks.",
        input="compact/in05-in.jsonld",
        expect="compact/in05-out.jsonld",
        context="compact/in05-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact JSON literal (boolean true)",
        purpose="Tests compacting property with @type @json to a JSON literal (boolean true).",
        input="compact/js01-in.jsonld",
        expect="compact/js01-out.jsonld",
        context="compact/js01-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact JSON literal (boolean false)",
        purpose="Tests compacting property with @type @json to a JSON literal (boolean false).",
        input="compact/js02-in.jsonld",
        expect="compact/js02-out.jsonld",
        context="compact/js02-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact JSON literal (double)",
        purpose="Tests compacting property with @type @json to a JSON literal (double).",
        input="compact/js03-in.jsonld",
        expect="compact/js03-out.jsonld",
        context="compact/js03-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact JSON literal (double-zero)",
        purpose="Tests compacting property with @type @json to a JSON literal (double-zero).",
        input="compact/js04-in.jsonld",
        expect="compact/js04-out.jsonld",
        context="compact/js04-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact JSON literal (integer)",
        purpose="Tests compacting property with @type @json to a JSON literal (integer).",
        input="compact/js05-in.jsonld",
        expect="compact/js05-out.jsonld",
        context="compact/js05-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact JSON literal (object)",
        purpose="Tests compacting property with @type @json to a JSON literal (object).",
        input="compact/js06-in.jsonld",
        expect="compact/js06-out.jsonld",
        context="compact/js06-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact JSON literal (array)",
        purpose="Tests compacting property with @type @json to a JSON literal (array).",
        input="compact/js07-in.jsonld",
        expect="compact/js07-out.jsonld",
        context="compact/js07-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact already expanded JSON literal",
        purpose="Tests compacting JSON literal does not expand terms inside json.",
        input="compact/js08-in.jsonld",
        expect="compact/js08-out.jsonld",
        context="compact/js08-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact already expanded JSON literal with aliased keys",
        purpose="Tests compacting JSON literal in expanded form.",
        input="compact/js09-in.jsonld",
        expect="compact/js09-out.jsonld",
        context="compact/js09-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact JSON literal (string)",
        purpose="Tests compacting property with @type @json to a JSON literal (string).",
        input="compact/js10-in.jsonld",
        expect="compact/js10-out.jsonld",
        context="compact/js10-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact JSON literal (null)",
        purpose="Tests compacting property with @type @json to a JSON literal (null).",
        input="compact/js11-in.jsonld",
        expect="compact/js11-out.jsonld",
        context="compact/js11-context.jsonld",
    ),
    PositiveCompactTest(
        name="most specific term matching in @list.",
        purpose="The most specific term that matches all of the elements in the list, taking into account the default language, must be selected, without considering case of language.",
        input="compact/la01-in.jsonld",
        expect="compact/la01-out.jsonld",
        context="compact/la01-context.jsonld",
    ),
    PositiveCompactTest(
        name="coerced @list containing an empty list",
        purpose="Lists of Lists",
        input="compact/li01-in.jsonld",
        expect="compact/li01-out.jsonld",
        context="compact/li01-context.jsonld",
    ),
    PositiveCompactTest(
        name="coerced @list containing a list",
        purpose="Lists of Lists",
        input="compact/li02-in.jsonld",
        expect="compact/li02-out.jsonld",
        context="compact/li02-context.jsonld",
    ),
    PositiveCompactTest(
        name="coerced @list containing an deep list",
        purpose="Lists of Lists",
        input="compact/li03-in.jsonld",
        expect="compact/li03-out.jsonld",
        context="compact/li03-context.jsonld",
    ),
    PositiveCompactTest(
        name="coerced @list containing multiple lists",
        purpose="Lists of Lists",
        input="compact/li04-in.jsonld",
        expect="compact/li04-out.jsonld",
        context="compact/li04-context.jsonld",
    ),
    PositiveCompactTest(
        name="coerced @list containing mixed list values",
        purpose="Lists of Lists",
        input="compact/li05-in.jsonld",
        expect="compact/li05-out.jsonld",
        context="compact/li05-context.jsonld",
    ),
    PositiveCompactTest(
        name="Indexes to object not having an @id",
        purpose="Compaction using @container: @id",
        input="compact/m001-in.jsonld",
        expect="compact/m001-out.jsonld",
        context="compact/m001-context.jsonld",
    ),
    PositiveCompactTest(
        name="Indexes to object already having an @id",
        purpose="Compaction using @container: @id",
        input="compact/m002-in.jsonld",
        expect="compact/m002-out.jsonld",
        context="compact/m002-context.jsonld",
    ),
    PositiveCompactTest(
        name="Indexes to object not having an @type",
        purpose="Compaction using @container: @type",
        input="compact/m003-in.jsonld",
        expect="compact/m003-out.jsonld",
        context="compact/m003-context.jsonld",
    ),
    PositiveCompactTest(
        name="Indexes to object already having an @type",
        purpose="Compaction using @container: @type",
        input="compact/m004-in.jsonld",
        expect="compact/m004-out.jsonld",
        context="compact/m004-context.jsonld",
    ),
    PositiveCompactTest(
        name="Indexes to object using compact IRI @id",
        purpose="Compaction using @container: @id",
        input="compact/m005-in.jsonld",
        expect="compact/m005-out.jsonld",
        context="compact/m005-context.jsonld",
    ),
    PositiveCompactTest(
        name="Indexes using compacted @type",
        purpose="Compaction using @container: @type",
        input="compact/m006-in.jsonld",
        expect="compact/m006-out.jsonld",
        context="compact/m006-context.jsonld",
    ),
    PositiveCompactTest(
        name="When type is in a type map",
        purpose="scoped context on @type",
        input="compact/m007-in.jsonld",
        expect="compact/m007-out.jsonld",
        context="compact/m007-context.jsonld",
    ),
    PositiveCompactTest(
        name="@index map with @none node definition",
        purpose="index on @index",
        input="compact/m008-in.jsonld",
        expect="compact/m008-out.jsonld",
        context="compact/m008-context.jsonld",
    ),
    PositiveCompactTest(
        name="@index map with @none value",
        purpose="index on @index",
        input="compact/m009-in.jsonld",
        expect="compact/m009-out.jsonld",
        context="compact/m009-context.jsonld",
    ),
    PositiveCompactTest(
        name="@index map with @none value using alias of @none",
        purpose="index on @index",
        input="compact/m010-in.jsonld",
        expect="compact/m010-out.jsonld",
        context="compact/m010-context.jsonld",
    ),
    PositiveCompactTest(
        name="@language map with no @language",
        purpose="index on @language",
        input="compact/m011-in.jsonld",
        expect="compact/m011-out.jsonld",
        context="compact/m011-context.jsonld",
    ),
    PositiveCompactTest(
        name="language map with no @language using alias of @none",
        purpose="index on @language",
        input="compact/m012-in.jsonld",
        expect="compact/m012-out.jsonld",
        context="compact/m012-context.jsonld",
    ),
    PositiveCompactTest(
        name="id map using @none",
        purpose="index on @id",
        input="compact/m013-in.jsonld",
        expect="compact/m013-out.jsonld",
        context="compact/m013-context.jsonld",
    ),
    PositiveCompactTest(
        name="id map using @none with alias",
        purpose="index on @id",
        input="compact/m014-in.jsonld",
        expect="compact/m014-out.jsonld",
        context="compact/m014-context.jsonld",
    ),
    PositiveCompactTest(
        name="type map using @none with alias",
        purpose="index on @type",
        input="compact/m015-in.jsonld",
        expect="compact/m015-out.jsonld",
        context="compact/m015-context.jsonld",
    ),
    PositiveCompactTest(
        name="type map using @none with alias",
        purpose="index on @type",
        input="compact/m016-in.jsonld",
        expect="compact/m016-out.jsonld",
        context="compact/m016-context.jsonld",
    ),
    PositiveCompactTest(
        name="graph index map using @none",
        purpose="index on @graph and @index",
        input="compact/m017-in.jsonld",
        expect="compact/m017-out.jsonld",
        context="compact/m017-context.jsonld",
    ),
    PositiveCompactTest(
        name="graph id map using @none",
        purpose="index on @graph and @id",
        input="compact/m018-in.jsonld",
        expect="compact/m018-out.jsonld",
        context="compact/m018-context.jsonld",
    ),
    PositiveCompactTest(
        name="graph id map using alias of @none",
        purpose="index on @graph and @id",
        input="compact/m019-in.jsonld",
        expect="compact/m019-out.jsonld",
        context="compact/m019-context.jsonld",
    ),
    PositiveCompactTest(
        name="node reference compacts to string value of type map",
        purpose="index on @type",
        input="compact/m020-in.jsonld",
        expect="compact/m020-out.jsonld",
        context="compact/m020-context.jsonld",
    ),
    PositiveCompactTest(
        name="node reference compacts to string value of type map with @type: @id",
        purpose="index on @type",
        input="compact/m021-in.jsonld",
        expect="compact/m021-out.jsonld",
        context="compact/m021-context.jsonld",
    ),
    PositiveCompactTest(
        name="node reference compacts to string value of type map with @type: @vocab",
        purpose="index on @type",
        input="compact/m022-in.jsonld",
        expect="compact/m022-out.jsonld",
        context="compact/m022-context.jsonld",
    ),
    PositiveCompactTest(
        name="Indexes to @nest for property with @nest",
        purpose="Compaction using @nest",
        input="compact/n001-in.jsonld",
        expect="compact/n001-out.jsonld",
        context="compact/n001-context.jsonld",
    ),
    PositiveCompactTest(
        name="Indexes to @nest for all properties with @nest",
        purpose="Compaction using @nest",
        input="compact/n002-in.jsonld",
        expect="compact/n002-out.jsonld",
        context="compact/n002-context.jsonld",
    ),
    PositiveCompactTest(
        name="Nests using alias of @nest",
        purpose="Compaction using @nest",
        input="compact/n003-in.jsonld",
        expect="compact/n003-out.jsonld",
        context="compact/n003-context.jsonld",
    ),
    PositiveCompactTest(
        name="Arrays of nested values",
        purpose="Compaction using @nest",
        input="compact/n004-in.jsonld",
        expect="compact/n004-out.jsonld",
        context="compact/n004-context.jsonld",
    ),
    PositiveCompactTest(
        name="Nested @container: @list",
        purpose="Compaction using @nest",
        input="compact/n005-in.jsonld",
        expect="compact/n005-out.jsonld",
        context="compact/n005-context.jsonld",
    ),
    PositiveCompactTest(
        name="Nested @container: @index",
        purpose="Compaction using @nest",
        input="compact/n006-in.jsonld",
        expect="compact/n006-out.jsonld",
        context="compact/n006-context.jsonld",
    ),
    PositiveCompactTest(
        name="Nested @container: @language",
        purpose="Compaction using @nest",
        input="compact/n007-in.jsonld",
        expect="compact/n007-out.jsonld",
        context="compact/n007-context.jsonld",
    ),
    PositiveCompactTest(
        name="Nested @container: @type",
        purpose="Compaction using @nest",
        input="compact/n008-in.jsonld",
        expect="compact/n008-out.jsonld",
        context="compact/n008-context.jsonld",
    ),
    PositiveCompactTest(
        name="Nested @container: @id",
        purpose="Compaction using @nest",
        input="compact/n009-in.jsonld",
        expect="compact/n009-out.jsonld",
        context="compact/n009-context.jsonld",
    ),
    PositiveCompactTest(
        name="Multiple nest aliases",
        purpose="Compaction using @nest",
        input="compact/n010-in.jsonld",
        expect="compact/n010-out.jsonld",
        context="compact/n010-context.jsonld",
    ),
    PositiveCompactTest(
        name="Nests using alias of @nest (defined with @id)",
        purpose="Compaction using @nest",
        input="compact/n011-in.jsonld",
        expect="compact/n011-out.jsonld",
        context="compact/n011-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact IRI will not use an expanded term definition in 1.0",
        purpose="Terms with an expanded term definition are not used for creating compact IRIs",
        input="compact/p001-in.jsonld",
        expect="compact/p001-out.jsonld",
        context="compact/p001-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact IRI does not use expanded term definition in 1.1",
        purpose="Terms with an expanded term definition are not used for creating compact IRIs",
        input="compact/p002-in.jsonld",
        expect="compact/p002-out.jsonld",
        context="compact/p002-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact IRI does not use simple term that does not end with a gen-delim",
        purpose="Terms not ending with a gen-delim are not used for creating compact IRIs",
        input="compact/p003-in.jsonld",
        expect="compact/p003-out.jsonld",
        context="compact/p003-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact IRIs using simple terms ending with gen-delim",
        purpose="All simple terms ending with gen-delim are suitable for compaction",
        input="compact/p004-in.jsonld",
        expect="compact/p004-out.jsonld",
        context="compact/p004-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact IRI uses term with definition including @prefix: true",
        purpose="Expanded term definition may set prefix explicitly in 1.1",
        input="compact/p005-in.jsonld",
        expect="compact/p005-out.jsonld",
        context="compact/p005-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact IRI uses term with definition including @prefix: true",
        purpose="Expanded term definition may set prefix explicitly in 1.1",
        input="compact/p006-in.jsonld",
        expect="compact/p006-out.jsonld",
        context="compact/p006-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact IRI not used as prefix",
        purpose="Terms including a colon are excluded from being used as a prefix",
        input="compact/p007-in.jsonld",
        expect="compact/p007-out.jsonld",
        context="compact/p007-context.jsonld",
    ),
    PositiveCompactTest(
        name="Compact IRI does not use term with definition including @prefix: false",
        purpose="Expanded term definition may set prefix explicitly in 1.1",
        input="compact/p008-in.jsonld",
        expect="compact/p008-out.jsonld",
        context="compact/p008-context.jsonld",
    ),
    PositiveCompactTest(
        name="property-valued index indexes property value, instead of property (value)",
        purpose="Compacting property-valued indexes.",
        input="compact/pi01-in.jsonld",
        expect="compact/pi01-out.jsonld",
        context="compact/pi01-context.jsonld",
    ),
    PositiveCompactTest(
        name="property-valued index indexes property value, instead of property (multiple values)",
        purpose="Compacting property-valued indexes.",
        input="compact/pi02-in.jsonld",
        expect="compact/pi02-out.jsonld",
        context="compact/pi02-context.jsonld",
    ),
    PositiveCompactTest(
        name="property-valued index indexes property value, instead of property (node)",
        purpose="Compacting property-valued indexes.",
        input="compact/pi03-in.jsonld",
        expect="compact/pi03-out.jsonld",
        context="compact/pi03-context.jsonld",
    ),
    PositiveCompactTest(
        name="property-valued index indexes property value, instead of property (multiple nodes)",
        purpose="Compacting property-valued indexes.",
        input="compact/pi04-in.jsonld",
        expect="compact/pi04-out.jsonld",
        context="compact/pi04-context.jsonld",
    ),
    PositiveCompactTest(
        name="property-valued index indexes using @none if no property value exists",
        purpose="Compacting property-valued indexes.",
        input="compact/pi05-in.jsonld",
        expect="compact/pi05-out.jsonld",
        context="compact/pi05-context.jsonld",
    ),
    PositiveCompactTest(
        name="property-valued index indexes using @none if no property value does not compact to string",
        purpose="Compacting property-valued indexes.",
        input="compact/pi06-in.jsonld",
        expect="compact/pi06-out.jsonld",
        context="compact/pi06-context.jsonld",
    ),
    NegativeCompactTest(
        name="Check illegal clearing of context with protected terms",
        purpose="Check error when clearing a context with protected terms.",
        input="compact/pr01-in.jsonld",
        expect_error_code="invalid context nullification",
        context="compact/pr01-context.jsonld",
    ),
    NegativeCompactTest(
        name="Check illegal overriding of protected term",
        purpose="Check error when overriding a protected term.",
        input="compact/pr02-in.jsonld",
        expect_error_code="protected term redefinition",
        context="compact/pr02-context.jsonld",
    ),
    NegativeCompactTest(
        name="Check illegal overriding of protected term from type-scoped context",
        purpose="Check error when overriding a protected term from type-scoped context.",
        input="compact/pr03-in.jsonld",
        expect_error_code="protected term redefinition",
        context="compact/pr03-context.jsonld",
    ),
    PositiveCompactTest(
        name="Check legal overriding of protected term from property-scoped context",
        purpose="Check overriding a protected term from property-scoped context.",
        input="compact/pr04-in.jsonld",
        expect="compact/pr04-out.jsonld",
        context="compact/pr04-context.jsonld",
    ),
    PositiveCompactTest(
        name="Check legal overriding of type-scoped protected term from nested node",
        purpose="Check legal overriding of type-scoped protected term from nested node.",
        input="compact/pr05-in.jsonld",
        expect="compact/pr05-out.jsonld",
        context="compact/pr05-context.jsonld",
    ),
    PositiveCompactTest(
        name="Expands and compacts to document base by default",
        purpose="Compact IRI attempts to compact document-relative IRIs",
        input="compact/r001-in.jsonld",
        expect="compact/r001-out.jsonld",
        context="compact/r001-context.jsonld",
    ),
    PositiveCompactTest(
        name="Expands and does not compact to document base with compactToRelative false",
        purpose="With compactToRelative option set to false, IRIs which could be made relative to the document base are not made relative.",
        input="compact/r002-in.jsonld",
        expect="compact/r002-out.jsonld",
        context="compact/r002-context.jsonld",
    ),
    PositiveCompactTest(
        name="@context with single array values",
        purpose="@context values may be in an array",
        input="compact/s001-in.jsonld",
        expect="compact/s001-out.jsonld",
        context="compact/s001-context.jsonld",
    ),
    PositiveCompactTest(
        name="@context with array including @set uses array values",
        purpose="@context values may include @set along with another compatible value",
        input="compact/s002-in.jsonld",
        expect="compact/s002-out.jsonld",
        context="compact/s002-context.jsonld",
    ),
    PositiveCompactTest(
        name="@type: @none does not compact values",
        purpose="@type: @none does not compact values.",
        input="compact/tn01-in.jsonld",
        expect="compact/tn01-out.jsonld",
        context="compact/tn01-context.jsonld",
    ),
    PositiveCompactTest(
        name="@type: @none does not use arrays by default",
        purpose="@type: @none honors @container.",
        input="compact/tn02-in.jsonld",
        expect="compact/tn02-out.jsonld",
        context="compact/tn02-context.jsonld",
    ),
    PositiveCompactTest(
        name="@type: @none uses arrays with @container: @set",
        purpose="@type: @none honors @container.",
        input="compact/tn03-in.jsonld",
        expect="compact/tn03-out.jsonld",
        context="compact/tn03-context.jsonld",
    ),
]
