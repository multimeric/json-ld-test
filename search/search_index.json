{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#primary-interface","title":"Primary Interface","text":""},{"location":"#json_ld_test.get_manifest","title":"<code>json_ld_test.get_manifest(manifest_type)</code>","text":"<p>Load a specific test manifest</p> <p>Parameters:</p> Name Type Description Default <code>manifest_type</code> <code>ManifestType</code> <p>The type of manifest to load as a string, for example <code>\"compact\"</code>.</p> required <p>Returns:</p> Type Description <code>TestManifest</code> <p>The requested manifest object.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; manifest = get_manifest(\"compact\")\n&gt;&gt;&gt; manifest.name\n'Compaction'\n</code></pre> Source code in <code>src/json_ld_test/load.py</code> <pre><code>def get_manifest(manifest_type: ManifestType) -&gt; TestManifest:\n    \"\"\"\n    Load a specific test manifest\n\n    Args: \n        manifest_type: The type of manifest to load as a string, for example `\"compact\"`.\n        See `ManifestType`.\n\n    Returns:\n        The requested manifest object.\n\n    Examples:\n        &gt;&gt;&gt; manifest = get_manifest(\"compact\")\n        &gt;&gt;&gt; manifest.name\n        'Compaction'\n    \"\"\"\n    content = (anchor / f\"{manifest_type}-manifest.jsonld\").read_text()\n    return cast(TestManifest, JSONLoader().load(content, TestManifest))\n</code></pre>"},{"location":"#json_ld_test.get_test_file","title":"<code>json_ld_test.get_test_file(test_name)</code>","text":"<p>Load a specific test file by name</p> <p>Parameters:</p> Name Type Description Default <code>test_name</code> <code>str</code> <p>Name of the test file to load, including the type prefix, for example <code>compact/0001-context.jsonld</code>. You typically should only ever need to use <code>Test</code> object fields such as <code>input</code>, <code>context</code>, and <code>expect</code> for this argument.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The content of the test file as a string.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; manifest = get_manifest(\"compact\")\n&gt;&gt;&gt; some_test = manifest.sequence[0]\n&gt;&gt;&gt; get_test_file(some_test.input)\n'{\"@id\": \"http://example.org/test#example\"}'\n</code></pre> Source code in <code>src/json_ld_test/load.py</code> <pre><code>def get_test_file(test_name: str) -&gt; str:\n    \"\"\"\n    Load a specific test file by name\n\n    Args:\n        test_name: Name of the test file to load, including the type prefix, for example `compact/0001-context.jsonld`.\n            You typically should only ever need to use `Test` object fields such as `input`, `context`, and `expect` for this argument.\n\n    Returns:\n        The content of the test file as a string.\n\n    Examples:\n        &gt;&gt;&gt; manifest = get_manifest(\"compact\")\n        &gt;&gt;&gt; some_test = manifest.sequence[0]\n        &gt;&gt;&gt; get_test_file(some_test.input)\n        '{\"@id\": \"http://example.org/test#example\"}'\n    \"\"\"\n    return (anchor / test_name).read_text()\n</code></pre>"},{"location":"#json_ld_test.get_all_manifests","title":"<code>json_ld_test.get_all_manifests()</code>","text":"<p>Get each possible TestManifest</p> <p>Returns:</p> Type Description <code>Iterable[TestManifest]</code> <p>An iterable of <code>TestManifest</code> objects. Call <code>list()</code> on this to get a list of all manifests.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; len(list(get_all_manifests()))\n7\n</code></pre> Source code in <code>src/json_ld_test/load.py</code> <pre><code>def get_all_manifests() -&gt; Iterable[TestManifest]:\n    \"\"\"\n    Get each possible TestManifest\n\n    Returns:\n        An iterable of `TestManifest` objects. Call `list()` on this to get a list of all manifests.\n\n    Examples:\n        &gt;&gt;&gt; len(list(get_all_manifests()))\n        7\n    \"\"\"\n    # Get the manifests for each type\n    for t in get_manifest_types():\n        yield get_manifest(t)\n</code></pre>"},{"location":"#json_ld_test.get_all_tests","title":"<code>json_ld_test.get_all_tests()</code>","text":"<p>Get each possible Test</p> <p>Returns:</p> Type Description <code>Iterable[Test]</code> <p>An iterable of <code>Test</code> objects. Call <code>list()</code> on this to get a list of all tests.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; len(list(get_all_tests()))\n1275\n</code></pre> Source code in <code>src/json_ld_test/load.py</code> <pre><code>def get_all_tests() -&gt; Iterable[Test]:\n    \"\"\"\n    Get each possible Test\n\n    Returns:\n        An iterable of `Test` objects. Call `list()` on this to get a list of all tests.\n\n    Examples:\n        &gt;&gt;&gt; len(list(get_all_tests()))\n        1275\n    \"\"\"\n    # Get all the tests from the manifests\n    for m in get_all_manifests():\n        yield from m.sequence\n</code></pre>"},{"location":"#json_ld_test.get_manifest_types","title":"<code>json_ld_test.get_manifest_types()</code>","text":"<p>Get the types of manifests that are available in the package.</p> <p>Returns:</p> Type Description <code>Iterable[ManifestType]</code> <p>An iterable of <code>ManifestType</code> objects, which are strings. Call <code>list()</code> on this to get a list of all manifest types.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; list(get_manifest_types())\n['compact', 'expand', 'flatten', 'fromRdf', 'toRdf', 'html', 'remote-doc']\n</code></pre> Source code in <code>src/json_ld_test/load.py</code> <pre><code>def get_manifest_types() -&gt; Iterable[ManifestType]:\n    \"\"\"\n    Get the types of manifests that are available in the package.\n\n    Returns:\n        An iterable of `ManifestType` objects, which are strings. Call `list()` on this to get a list of all manifest types.\n\n    Examples:\n        &gt;&gt;&gt; list(get_manifest_types())\n        ['compact', 'expand', 'flatten', 'fromRdf', 'toRdf', 'html', 'remote-doc']\n    \"\"\"\n    # Extract the manifest options from the Literal ManifestType\n    return ManifestType.__args__\n</code></pre>"},{"location":"#classes-and-types","title":"Classes and Types","text":""},{"location":"#json_ld_test.TestManifest","title":"<code>json_ld_test.TestManifest</code>  <code>pydantic-model</code>","text":"<p>               Bases: <code>Manifest</code></p> <p>A manifest that contains a sequence of tests that all relate to a specific JSON-LD feature.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"NegativeEvaluationTest\": {\n      \"additionalProperties\": false,\n      \"description\": \"Describes a test case whose input is `input` and expects to raise an error with the message `expectErrorCode`.\",\n      \"properties\": {\n        \"name\": {\n          \"linkml_meta\": {\n            \"alias\": \"name\",\n            \"domain_of\": [\n              \"Manifest\",\n              \"Test\"\n            ]\n          },\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"purpose\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"purpose\",\n            \"domain_of\": [\n              \"Test\"\n            ]\n          },\n          \"title\": \"Purpose\"\n        },\n        \"input\": {\n          \"linkml_meta\": {\n            \"alias\": \"input\",\n            \"domain_of\": [\n              \"Test\"\n            ]\n          },\n          \"title\": \"Input\",\n          \"type\": \"string\"\n        },\n        \"option\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Option\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"option\",\n            \"domain_of\": [\n              \"Test\"\n            ]\n          }\n        },\n        \"context\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"context\",\n            \"domain_of\": [\n              \"Test\"\n            ]\n          },\n          \"title\": \"Context\"\n        },\n        \"requires\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Requires\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"requires\",\n            \"domain_of\": [\n              \"Test\"\n            ]\n          }\n        },\n        \"expectErrorCode\": {\n          \"linkml_meta\": {\n            \"alias\": \"expectErrorCode\",\n            \"domain_of\": [\n              \"NegativeEvaluationTest\"\n            ]\n          },\n          \"title\": \"Expecterrorcode\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"name\",\n        \"input\",\n        \"expectErrorCode\"\n      ],\n      \"title\": \"NegativeEvaluationTest\",\n      \"type\": \"object\"\n    },\n    \"Option\": {\n      \"additionalProperties\": false,\n      \"description\": \"Captures all extra options that can be passed to a test.\",\n      \"properties\": {\n        \"specVersion\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/SpecVersion\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"specVersion\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          }\n        },\n        \"processingMode\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/SpecVersion\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"processingMode\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          }\n        },\n        \"base\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"base\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Base\"\n        },\n        \"normative\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"normative\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Normative\"\n        },\n        \"expandContext\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"expandContext\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Expandcontext\"\n        },\n        \"processorFeature\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"processorFeature\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Processorfeature\"\n        },\n        \"extractAllScripts\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"extractAllScripts\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Extractallscripts\"\n        },\n        \"contentType\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"contentType\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Contenttype\"\n        },\n        \"httpStatus\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"httpStatus\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Httpstatus\"\n        },\n        \"redirectTo\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"redirectTo\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Redirectto\"\n        },\n        \"httpLink\": {\n          \"anyOf\": [\n            {},\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"httpLink\",\n            \"any_of\": [\n              {\n                \"multivalued\": true\n              },\n              {\n                \"multivalued\": false\n              }\n            ],\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Httplink\"\n        },\n        \"produceGeneralizedRdf\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"produceGeneralizedRdf\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Producegeneralizedrdf\"\n        },\n        \"compactToRelative\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"compactToRelative\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Compacttorelative\"\n        },\n        \"compactArrays\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"compactArrays\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Compactarrays\"\n        },\n        \"useNativeTypes\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"useNativeTypes\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Usenativetypes\"\n        },\n        \"rdfDirection\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"rdfDirection\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Rdfdirection\"\n        },\n        \"useRdfType\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"useRdfType\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Userdftype\"\n        },\n        \"useJCS\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"useJCS\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Usejcs\"\n        }\n      },\n      \"title\": \"Option\",\n      \"type\": \"object\"\n    },\n    \"PositiveEvaluationTest\": {\n      \"additionalProperties\": false,\n      \"description\": \"Describes a test case whose input is `input` and expects the output to be `expect`.\",\n      \"properties\": {\n        \"name\": {\n          \"linkml_meta\": {\n            \"alias\": \"name\",\n            \"domain_of\": [\n              \"Manifest\",\n              \"Test\"\n            ]\n          },\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"purpose\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"purpose\",\n            \"domain_of\": [\n              \"Test\"\n            ]\n          },\n          \"title\": \"Purpose\"\n        },\n        \"input\": {\n          \"linkml_meta\": {\n            \"alias\": \"input\",\n            \"domain_of\": [\n              \"Test\"\n            ]\n          },\n          \"title\": \"Input\",\n          \"type\": \"string\"\n        },\n        \"option\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Option\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"option\",\n            \"domain_of\": [\n              \"Test\"\n            ]\n          }\n        },\n        \"context\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"context\",\n            \"domain_of\": [\n              \"Test\"\n            ]\n          },\n          \"title\": \"Context\"\n        },\n        \"requires\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Requires\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"requires\",\n            \"domain_of\": [\n              \"Test\"\n            ]\n          }\n        },\n        \"expect\": {\n          \"linkml_meta\": {\n            \"alias\": \"expect\",\n            \"domain_of\": [\n              \"PositiveEvaluationTest\"\n            ]\n          },\n          \"title\": \"Expect\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"name\",\n        \"input\",\n        \"expect\"\n      ],\n      \"title\": \"PositiveEvaluationTest\",\n      \"type\": \"object\"\n    },\n    \"PositiveSyntaxTest\": {\n      \"additionalProperties\": false,\n      \"description\": \"Describes a test case that only has to be parsed successfully to pass.\",\n      \"properties\": {\n        \"name\": {\n          \"linkml_meta\": {\n            \"alias\": \"name\",\n            \"domain_of\": [\n              \"Manifest\",\n              \"Test\"\n            ]\n          },\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"purpose\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"purpose\",\n            \"domain_of\": [\n              \"Test\"\n            ]\n          },\n          \"title\": \"Purpose\"\n        },\n        \"input\": {\n          \"linkml_meta\": {\n            \"alias\": \"input\",\n            \"domain_of\": [\n              \"Test\"\n            ]\n          },\n          \"title\": \"Input\",\n          \"type\": \"string\"\n        },\n        \"option\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Option\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"option\",\n            \"domain_of\": [\n              \"Test\"\n            ]\n          }\n        },\n        \"context\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"context\",\n            \"domain_of\": [\n              \"Test\"\n            ]\n          },\n          \"title\": \"Context\"\n        },\n        \"requires\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Requires\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"requires\",\n            \"domain_of\": [\n              \"Test\"\n            ]\n          }\n        }\n      },\n      \"required\": [\n        \"name\",\n        \"input\"\n      ],\n      \"title\": \"PositiveSyntaxTest\",\n      \"type\": \"object\"\n    },\n    \"Requires\": {\n      \"enum\": [\n        \"I18nDatatype\",\n        \"CompoundLiteral\",\n        \"GeneralizedRdf\"\n      ],\n      \"title\": \"Requires\",\n      \"type\": \"string\"\n    },\n    \"SpecVersion\": {\n      \"enum\": [\n        \"json-ld-1.0\",\n        \"json-ld-1.1\"\n      ],\n      \"title\": \"SpecVersion\",\n      \"type\": \"string\"\n    }\n  },\n  \"additionalProperties\": false,\n  \"description\": \"A manifest that contains a sequence of tests that all relate to a specific JSON-LD feature.\",\n  \"properties\": {\n    \"name\": {\n      \"linkml_meta\": {\n        \"alias\": \"name\",\n        \"domain_of\": [\n          \"Manifest\",\n          \"Test\"\n        ]\n      },\n      \"title\": \"Name\",\n      \"type\": \"string\"\n    },\n    \"description\": {\n      \"linkml_meta\": {\n        \"alias\": \"description\",\n        \"domain_of\": [\n          \"Manifest\"\n        ]\n      },\n      \"title\": \"Description\",\n      \"type\": \"string\"\n    },\n    \"sequence\": {\n      \"items\": {\n        \"anyOf\": [\n          {\n            \"$ref\": \"#/$defs/NegativeEvaluationTest\"\n          },\n          {\n            \"$ref\": \"#/$defs/PositiveEvaluationTest\"\n          },\n          {\n            \"$ref\": \"#/$defs/PositiveSyntaxTest\"\n          }\n        ]\n      },\n      \"linkml_meta\": {\n        \"alias\": \"sequence\",\n        \"any_of\": [\n          {\n            \"range\": \"PositiveEvaluationTest\"\n          },\n          {\n            \"range\": \"NegativeEvaluationTest\"\n          },\n          {\n            \"range\": \"PositiveSyntaxTest\"\n          }\n        ],\n        \"domain_of\": [\n          \"Manifest\"\n        ]\n      },\n      \"title\": \"Sequence\",\n      \"type\": \"array\"\n    },\n    \"baseIri\": {\n      \"linkml_meta\": {\n        \"alias\": \"baseIri\",\n        \"domain_of\": [\n          \"TestManifest\"\n        ]\n      },\n      \"title\": \"Baseiri\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"name\",\n    \"description\",\n    \"sequence\",\n    \"baseIri\"\n  ],\n  \"title\": \"TestManifest\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>linkml_meta</code>                 (<code>LinkMLMeta</code>)             </li> <li> <code>baseIri</code>                 (<code>str</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>description</code>                 (<code>str</code>)             </li> <li> <code>sequence</code>                 (<code>List[Union[NegativeEvaluationTest, PositiveEvaluationTest, PositiveSyntaxTest]]</code>)             </li> </ul> Source code in <code>src/json_ld_test/models.py</code> <pre><code>class TestManifest(Manifest):\n    \"\"\"\n    A manifest that contains a sequence of tests that all relate to a specific JSON-LD feature.\n\n    \"\"\"\n    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'from_schema': 'https://w3c.github.io/json-ld-api/tests',\n         'slot_usage': {'sequence': {'any_of': [{'range': 'PositiveEvaluationTest'},\n                                                {'range': 'NegativeEvaluationTest'},\n                                                {'range': 'PositiveSyntaxTest'}],\n                                     'name': 'sequence'}}})\n\n    baseIri: str = Field(..., json_schema_extra = { \"linkml_meta\": {'alias': 'baseIri', 'domain_of': ['TestManifest']} })\n    name: str = Field(..., json_schema_extra = { \"linkml_meta\": {'alias': 'name', 'domain_of': ['Manifest', 'Test']} })\n    description: str = Field(..., json_schema_extra = { \"linkml_meta\": {'alias': 'description', 'domain_of': ['Manifest']} })\n    sequence: List[Union[NegativeEvaluationTest, PositiveEvaluationTest, PositiveSyntaxTest]] = Field(..., json_schema_extra = { \"linkml_meta\": {'alias': 'sequence',\n         'any_of': [{'range': 'PositiveEvaluationTest'},\n                    {'range': 'NegativeEvaluationTest'},\n                    {'range': 'PositiveSyntaxTest'}],\n         'domain_of': ['Manifest']} })\n</code></pre>"},{"location":"#json_ld_test.PositiveEvaluationTest","title":"<code>json_ld_test.PositiveEvaluationTest</code>  <code>pydantic-model</code>","text":"<p>               Bases: <code>Test</code></p> <p>Describes a test case whose input is <code>input</code> and expects the output to be <code>expect</code>.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Option\": {\n      \"additionalProperties\": false,\n      \"description\": \"Captures all extra options that can be passed to a test.\",\n      \"properties\": {\n        \"specVersion\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/SpecVersion\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"specVersion\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          }\n        },\n        \"processingMode\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/SpecVersion\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"processingMode\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          }\n        },\n        \"base\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"base\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Base\"\n        },\n        \"normative\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"normative\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Normative\"\n        },\n        \"expandContext\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"expandContext\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Expandcontext\"\n        },\n        \"processorFeature\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"processorFeature\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Processorfeature\"\n        },\n        \"extractAllScripts\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"extractAllScripts\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Extractallscripts\"\n        },\n        \"contentType\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"contentType\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Contenttype\"\n        },\n        \"httpStatus\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"httpStatus\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Httpstatus\"\n        },\n        \"redirectTo\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"redirectTo\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Redirectto\"\n        },\n        \"httpLink\": {\n          \"anyOf\": [\n            {},\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"httpLink\",\n            \"any_of\": [\n              {\n                \"multivalued\": true\n              },\n              {\n                \"multivalued\": false\n              }\n            ],\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Httplink\"\n        },\n        \"produceGeneralizedRdf\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"produceGeneralizedRdf\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Producegeneralizedrdf\"\n        },\n        \"compactToRelative\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"compactToRelative\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Compacttorelative\"\n        },\n        \"compactArrays\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"compactArrays\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Compactarrays\"\n        },\n        \"useNativeTypes\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"useNativeTypes\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Usenativetypes\"\n        },\n        \"rdfDirection\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"rdfDirection\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Rdfdirection\"\n        },\n        \"useRdfType\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"useRdfType\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Userdftype\"\n        },\n        \"useJCS\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"useJCS\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Usejcs\"\n        }\n      },\n      \"title\": \"Option\",\n      \"type\": \"object\"\n    },\n    \"Requires\": {\n      \"enum\": [\n        \"I18nDatatype\",\n        \"CompoundLiteral\",\n        \"GeneralizedRdf\"\n      ],\n      \"title\": \"Requires\",\n      \"type\": \"string\"\n    },\n    \"SpecVersion\": {\n      \"enum\": [\n        \"json-ld-1.0\",\n        \"json-ld-1.1\"\n      ],\n      \"title\": \"SpecVersion\",\n      \"type\": \"string\"\n    }\n  },\n  \"additionalProperties\": false,\n  \"description\": \"Describes a test case whose input is `input` and expects the output to be `expect`.\",\n  \"properties\": {\n    \"name\": {\n      \"linkml_meta\": {\n        \"alias\": \"name\",\n        \"domain_of\": [\n          \"Manifest\",\n          \"Test\"\n        ]\n      },\n      \"title\": \"Name\",\n      \"type\": \"string\"\n    },\n    \"purpose\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"linkml_meta\": {\n        \"alias\": \"purpose\",\n        \"domain_of\": [\n          \"Test\"\n        ]\n      },\n      \"title\": \"Purpose\"\n    },\n    \"input\": {\n      \"linkml_meta\": {\n        \"alias\": \"input\",\n        \"domain_of\": [\n          \"Test\"\n        ]\n      },\n      \"title\": \"Input\",\n      \"type\": \"string\"\n    },\n    \"option\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/Option\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"linkml_meta\": {\n        \"alias\": \"option\",\n        \"domain_of\": [\n          \"Test\"\n        ]\n      }\n    },\n    \"context\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"linkml_meta\": {\n        \"alias\": \"context\",\n        \"domain_of\": [\n          \"Test\"\n        ]\n      },\n      \"title\": \"Context\"\n    },\n    \"requires\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/Requires\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"linkml_meta\": {\n        \"alias\": \"requires\",\n        \"domain_of\": [\n          \"Test\"\n        ]\n      }\n    },\n    \"expect\": {\n      \"linkml_meta\": {\n        \"alias\": \"expect\",\n        \"domain_of\": [\n          \"PositiveEvaluationTest\"\n        ]\n      },\n      \"title\": \"Expect\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"name\",\n    \"input\",\n    \"expect\"\n  ],\n  \"title\": \"PositiveEvaluationTest\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>linkml_meta</code>                 (<code>LinkMLMeta</code>)             </li> <li> <code>expect</code>                 (<code>str</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>purpose</code>                 (<code>Optional[str]</code>)             </li> <li> <code>input</code>                 (<code>str</code>)             </li> <li> <code>option</code>                 (<code>Optional[Option]</code>)             </li> <li> <code>context</code>                 (<code>Optional[str]</code>)             </li> <li> <code>requires</code>                 (<code>Optional[Requires]</code>)             </li> </ul> Source code in <code>src/json_ld_test/models.py</code> <pre><code>class PositiveEvaluationTest(Test):\n    \"\"\"\n    Describes a test case whose input is `input` and expects the output to be `expect`.\n    \"\"\"\n    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'from_schema': 'https://w3c.github.io/json-ld-api/tests'})\n\n    expect: str = Field(..., json_schema_extra = { \"linkml_meta\": {'alias': 'expect', 'domain_of': ['PositiveEvaluationTest']} })\n    name: str = Field(..., json_schema_extra = { \"linkml_meta\": {'alias': 'name', 'domain_of': ['Manifest', 'Test']} })\n    purpose: Optional[str] = Field(None, json_schema_extra = { \"linkml_meta\": {'alias': 'purpose', 'domain_of': ['Test']} })\n    input: str = Field(..., json_schema_extra = { \"linkml_meta\": {'alias': 'input', 'domain_of': ['Test']} })\n    option: Optional[Option] = Field(None, json_schema_extra = { \"linkml_meta\": {'alias': 'option', 'domain_of': ['Test']} })\n    context: Optional[str] = Field(None, json_schema_extra = { \"linkml_meta\": {'alias': 'context', 'domain_of': ['Test']} })\n    requires: Optional[Requires] = Field(None, json_schema_extra = { \"linkml_meta\": {'alias': 'requires', 'domain_of': ['Test']} })\n</code></pre>"},{"location":"#json_ld_test.NegativeEvaluationTest","title":"<code>json_ld_test.NegativeEvaluationTest</code>  <code>pydantic-model</code>","text":"<p>               Bases: <code>Test</code></p> <p>Describes a test case whose input is <code>input</code> and expects to raise an error with the message <code>expectErrorCode</code>.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Option\": {\n      \"additionalProperties\": false,\n      \"description\": \"Captures all extra options that can be passed to a test.\",\n      \"properties\": {\n        \"specVersion\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/SpecVersion\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"specVersion\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          }\n        },\n        \"processingMode\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/SpecVersion\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"processingMode\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          }\n        },\n        \"base\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"base\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Base\"\n        },\n        \"normative\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"normative\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Normative\"\n        },\n        \"expandContext\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"expandContext\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Expandcontext\"\n        },\n        \"processorFeature\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"processorFeature\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Processorfeature\"\n        },\n        \"extractAllScripts\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"extractAllScripts\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Extractallscripts\"\n        },\n        \"contentType\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"contentType\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Contenttype\"\n        },\n        \"httpStatus\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"httpStatus\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Httpstatus\"\n        },\n        \"redirectTo\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"redirectTo\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Redirectto\"\n        },\n        \"httpLink\": {\n          \"anyOf\": [\n            {},\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"httpLink\",\n            \"any_of\": [\n              {\n                \"multivalued\": true\n              },\n              {\n                \"multivalued\": false\n              }\n            ],\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Httplink\"\n        },\n        \"produceGeneralizedRdf\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"produceGeneralizedRdf\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Producegeneralizedrdf\"\n        },\n        \"compactToRelative\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"compactToRelative\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Compacttorelative\"\n        },\n        \"compactArrays\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"compactArrays\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Compactarrays\"\n        },\n        \"useNativeTypes\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"useNativeTypes\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Usenativetypes\"\n        },\n        \"rdfDirection\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"rdfDirection\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Rdfdirection\"\n        },\n        \"useRdfType\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"useRdfType\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Userdftype\"\n        },\n        \"useJCS\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"useJCS\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Usejcs\"\n        }\n      },\n      \"title\": \"Option\",\n      \"type\": \"object\"\n    },\n    \"Requires\": {\n      \"enum\": [\n        \"I18nDatatype\",\n        \"CompoundLiteral\",\n        \"GeneralizedRdf\"\n      ],\n      \"title\": \"Requires\",\n      \"type\": \"string\"\n    },\n    \"SpecVersion\": {\n      \"enum\": [\n        \"json-ld-1.0\",\n        \"json-ld-1.1\"\n      ],\n      \"title\": \"SpecVersion\",\n      \"type\": \"string\"\n    }\n  },\n  \"additionalProperties\": false,\n  \"description\": \"Describes a test case whose input is `input` and expects to raise an error with the message `expectErrorCode`.\",\n  \"properties\": {\n    \"name\": {\n      \"linkml_meta\": {\n        \"alias\": \"name\",\n        \"domain_of\": [\n          \"Manifest\",\n          \"Test\"\n        ]\n      },\n      \"title\": \"Name\",\n      \"type\": \"string\"\n    },\n    \"purpose\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"linkml_meta\": {\n        \"alias\": \"purpose\",\n        \"domain_of\": [\n          \"Test\"\n        ]\n      },\n      \"title\": \"Purpose\"\n    },\n    \"input\": {\n      \"linkml_meta\": {\n        \"alias\": \"input\",\n        \"domain_of\": [\n          \"Test\"\n        ]\n      },\n      \"title\": \"Input\",\n      \"type\": \"string\"\n    },\n    \"option\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/Option\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"linkml_meta\": {\n        \"alias\": \"option\",\n        \"domain_of\": [\n          \"Test\"\n        ]\n      }\n    },\n    \"context\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"linkml_meta\": {\n        \"alias\": \"context\",\n        \"domain_of\": [\n          \"Test\"\n        ]\n      },\n      \"title\": \"Context\"\n    },\n    \"requires\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/Requires\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"linkml_meta\": {\n        \"alias\": \"requires\",\n        \"domain_of\": [\n          \"Test\"\n        ]\n      }\n    },\n    \"expectErrorCode\": {\n      \"linkml_meta\": {\n        \"alias\": \"expectErrorCode\",\n        \"domain_of\": [\n          \"NegativeEvaluationTest\"\n        ]\n      },\n      \"title\": \"Expecterrorcode\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"name\",\n    \"input\",\n    \"expectErrorCode\"\n  ],\n  \"title\": \"NegativeEvaluationTest\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>linkml_meta</code>                 (<code>LinkMLMeta</code>)             </li> <li> <code>expectErrorCode</code>                 (<code>str</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>purpose</code>                 (<code>Optional[str]</code>)             </li> <li> <code>input</code>                 (<code>str</code>)             </li> <li> <code>option</code>                 (<code>Optional[Option]</code>)             </li> <li> <code>context</code>                 (<code>Optional[str]</code>)             </li> <li> <code>requires</code>                 (<code>Optional[Requires]</code>)             </li> </ul> Source code in <code>src/json_ld_test/models.py</code> <pre><code>class NegativeEvaluationTest(Test):\n    \"\"\"\n    Describes a test case whose input is `input` and expects to raise an error with the message `expectErrorCode`.\n    \"\"\"\n    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'from_schema': 'https://w3c.github.io/json-ld-api/tests'})\n\n    expectErrorCode: str = Field(..., json_schema_extra = { \"linkml_meta\": {'alias': 'expectErrorCode', 'domain_of': ['NegativeEvaluationTest']} })\n    name: str = Field(..., json_schema_extra = { \"linkml_meta\": {'alias': 'name', 'domain_of': ['Manifest', 'Test']} })\n    purpose: Optional[str] = Field(None, json_schema_extra = { \"linkml_meta\": {'alias': 'purpose', 'domain_of': ['Test']} })\n    input: str = Field(..., json_schema_extra = { \"linkml_meta\": {'alias': 'input', 'domain_of': ['Test']} })\n    option: Optional[Option] = Field(None, json_schema_extra = { \"linkml_meta\": {'alias': 'option', 'domain_of': ['Test']} })\n    context: Optional[str] = Field(None, json_schema_extra = { \"linkml_meta\": {'alias': 'context', 'domain_of': ['Test']} })\n    requires: Optional[Requires] = Field(None, json_schema_extra = { \"linkml_meta\": {'alias': 'requires', 'domain_of': ['Test']} })\n</code></pre>"},{"location":"#json_ld_test.PositiveSyntaxTest","title":"<code>json_ld_test.PositiveSyntaxTest</code>  <code>pydantic-model</code>","text":"<p>               Bases: <code>Test</code></p> <p>Describes a test case that only has to be parsed successfully to pass.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Option\": {\n      \"additionalProperties\": false,\n      \"description\": \"Captures all extra options that can be passed to a test.\",\n      \"properties\": {\n        \"specVersion\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/SpecVersion\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"specVersion\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          }\n        },\n        \"processingMode\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/SpecVersion\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"processingMode\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          }\n        },\n        \"base\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"base\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Base\"\n        },\n        \"normative\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"normative\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Normative\"\n        },\n        \"expandContext\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"expandContext\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Expandcontext\"\n        },\n        \"processorFeature\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"processorFeature\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Processorfeature\"\n        },\n        \"extractAllScripts\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"extractAllScripts\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Extractallscripts\"\n        },\n        \"contentType\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"contentType\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Contenttype\"\n        },\n        \"httpStatus\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"httpStatus\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Httpstatus\"\n        },\n        \"redirectTo\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"redirectTo\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Redirectto\"\n        },\n        \"httpLink\": {\n          \"anyOf\": [\n            {},\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"httpLink\",\n            \"any_of\": [\n              {\n                \"multivalued\": true\n              },\n              {\n                \"multivalued\": false\n              }\n            ],\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Httplink\"\n        },\n        \"produceGeneralizedRdf\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"produceGeneralizedRdf\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Producegeneralizedrdf\"\n        },\n        \"compactToRelative\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"compactToRelative\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Compacttorelative\"\n        },\n        \"compactArrays\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"compactArrays\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Compactarrays\"\n        },\n        \"useNativeTypes\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"useNativeTypes\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Usenativetypes\"\n        },\n        \"rdfDirection\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"rdfDirection\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Rdfdirection\"\n        },\n        \"useRdfType\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"useRdfType\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Userdftype\"\n        },\n        \"useJCS\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"useJCS\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Usejcs\"\n        }\n      },\n      \"title\": \"Option\",\n      \"type\": \"object\"\n    },\n    \"Requires\": {\n      \"enum\": [\n        \"I18nDatatype\",\n        \"CompoundLiteral\",\n        \"GeneralizedRdf\"\n      ],\n      \"title\": \"Requires\",\n      \"type\": \"string\"\n    },\n    \"SpecVersion\": {\n      \"enum\": [\n        \"json-ld-1.0\",\n        \"json-ld-1.1\"\n      ],\n      \"title\": \"SpecVersion\",\n      \"type\": \"string\"\n    }\n  },\n  \"additionalProperties\": false,\n  \"description\": \"Describes a test case that only has to be parsed successfully to pass.\",\n  \"properties\": {\n    \"name\": {\n      \"linkml_meta\": {\n        \"alias\": \"name\",\n        \"domain_of\": [\n          \"Manifest\",\n          \"Test\"\n        ]\n      },\n      \"title\": \"Name\",\n      \"type\": \"string\"\n    },\n    \"purpose\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"linkml_meta\": {\n        \"alias\": \"purpose\",\n        \"domain_of\": [\n          \"Test\"\n        ]\n      },\n      \"title\": \"Purpose\"\n    },\n    \"input\": {\n      \"linkml_meta\": {\n        \"alias\": \"input\",\n        \"domain_of\": [\n          \"Test\"\n        ]\n      },\n      \"title\": \"Input\",\n      \"type\": \"string\"\n    },\n    \"option\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/Option\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"linkml_meta\": {\n        \"alias\": \"option\",\n        \"domain_of\": [\n          \"Test\"\n        ]\n      }\n    },\n    \"context\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"linkml_meta\": {\n        \"alias\": \"context\",\n        \"domain_of\": [\n          \"Test\"\n        ]\n      },\n      \"title\": \"Context\"\n    },\n    \"requires\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/Requires\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"linkml_meta\": {\n        \"alias\": \"requires\",\n        \"domain_of\": [\n          \"Test\"\n        ]\n      }\n    }\n  },\n  \"required\": [\n    \"name\",\n    \"input\"\n  ],\n  \"title\": \"PositiveSyntaxTest\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>linkml_meta</code>                 (<code>LinkMLMeta</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>purpose</code>                 (<code>Optional[str]</code>)             </li> <li> <code>input</code>                 (<code>str</code>)             </li> <li> <code>option</code>                 (<code>Optional[Option]</code>)             </li> <li> <code>context</code>                 (<code>Optional[str]</code>)             </li> <li> <code>requires</code>                 (<code>Optional[Requires]</code>)             </li> </ul> Source code in <code>src/json_ld_test/models.py</code> <pre><code>class PositiveSyntaxTest(Test):\n    \"\"\"\n    Describes a test case that only has to be parsed successfully to pass.\n    \"\"\"\n    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'from_schema': 'https://w3c.github.io/json-ld-api/tests'})\n\n    name: str = Field(..., json_schema_extra = { \"linkml_meta\": {'alias': 'name', 'domain_of': ['Manifest', 'Test']} })\n    purpose: Optional[str] = Field(None, json_schema_extra = { \"linkml_meta\": {'alias': 'purpose', 'domain_of': ['Test']} })\n    input: str = Field(..., json_schema_extra = { \"linkml_meta\": {'alias': 'input', 'domain_of': ['Test']} })\n    option: Optional[Option] = Field(None, json_schema_extra = { \"linkml_meta\": {'alias': 'option', 'domain_of': ['Test']} })\n    context: Optional[str] = Field(None, json_schema_extra = { \"linkml_meta\": {'alias': 'context', 'domain_of': ['Test']} })\n    requires: Optional[Requires] = Field(None, json_schema_extra = { \"linkml_meta\": {'alias': 'requires', 'domain_of': ['Test']} })\n</code></pre>"},{"location":"#json_ld_test.Test","title":"<code>json_ld_test.Test</code>  <code>pydantic-model</code>","text":"<p>               Bases: <code>ConfiguredBaseModel</code></p> <p>Abstract parent class for all test cases.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Option\": {\n      \"additionalProperties\": false,\n      \"description\": \"Captures all extra options that can be passed to a test.\",\n      \"properties\": {\n        \"specVersion\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/SpecVersion\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"specVersion\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          }\n        },\n        \"processingMode\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/SpecVersion\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"processingMode\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          }\n        },\n        \"base\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"base\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Base\"\n        },\n        \"normative\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"normative\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Normative\"\n        },\n        \"expandContext\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"expandContext\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Expandcontext\"\n        },\n        \"processorFeature\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"processorFeature\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Processorfeature\"\n        },\n        \"extractAllScripts\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"extractAllScripts\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Extractallscripts\"\n        },\n        \"contentType\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"contentType\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Contenttype\"\n        },\n        \"httpStatus\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"httpStatus\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Httpstatus\"\n        },\n        \"redirectTo\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"redirectTo\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Redirectto\"\n        },\n        \"httpLink\": {\n          \"anyOf\": [\n            {},\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"httpLink\",\n            \"any_of\": [\n              {\n                \"multivalued\": true\n              },\n              {\n                \"multivalued\": false\n              }\n            ],\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Httplink\"\n        },\n        \"produceGeneralizedRdf\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"produceGeneralizedRdf\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Producegeneralizedrdf\"\n        },\n        \"compactToRelative\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"compactToRelative\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Compacttorelative\"\n        },\n        \"compactArrays\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"compactArrays\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Compactarrays\"\n        },\n        \"useNativeTypes\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"useNativeTypes\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Usenativetypes\"\n        },\n        \"rdfDirection\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"rdfDirection\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Rdfdirection\"\n        },\n        \"useRdfType\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"useRdfType\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Userdftype\"\n        },\n        \"useJCS\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"linkml_meta\": {\n            \"alias\": \"useJCS\",\n            \"domain_of\": [\n              \"Option\"\n            ]\n          },\n          \"title\": \"Usejcs\"\n        }\n      },\n      \"title\": \"Option\",\n      \"type\": \"object\"\n    },\n    \"Requires\": {\n      \"enum\": [\n        \"I18nDatatype\",\n        \"CompoundLiteral\",\n        \"GeneralizedRdf\"\n      ],\n      \"title\": \"Requires\",\n      \"type\": \"string\"\n    },\n    \"SpecVersion\": {\n      \"enum\": [\n        \"json-ld-1.0\",\n        \"json-ld-1.1\"\n      ],\n      \"title\": \"SpecVersion\",\n      \"type\": \"string\"\n    }\n  },\n  \"additionalProperties\": false,\n  \"description\": \"Abstract parent class for all test cases.\",\n  \"properties\": {\n    \"name\": {\n      \"linkml_meta\": {\n        \"alias\": \"name\",\n        \"domain_of\": [\n          \"Manifest\",\n          \"Test\"\n        ]\n      },\n      \"title\": \"Name\",\n      \"type\": \"string\"\n    },\n    \"purpose\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"linkml_meta\": {\n        \"alias\": \"purpose\",\n        \"domain_of\": [\n          \"Test\"\n        ]\n      },\n      \"title\": \"Purpose\"\n    },\n    \"input\": {\n      \"linkml_meta\": {\n        \"alias\": \"input\",\n        \"domain_of\": [\n          \"Test\"\n        ]\n      },\n      \"title\": \"Input\",\n      \"type\": \"string\"\n    },\n    \"option\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/Option\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"linkml_meta\": {\n        \"alias\": \"option\",\n        \"domain_of\": [\n          \"Test\"\n        ]\n      }\n    },\n    \"context\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"linkml_meta\": {\n        \"alias\": \"context\",\n        \"domain_of\": [\n          \"Test\"\n        ]\n      },\n      \"title\": \"Context\"\n    },\n    \"requires\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/Requires\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"linkml_meta\": {\n        \"alias\": \"requires\",\n        \"domain_of\": [\n          \"Test\"\n        ]\n      }\n    }\n  },\n  \"required\": [\n    \"name\",\n    \"input\"\n  ],\n  \"title\": \"Test\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>linkml_meta</code>                 (<code>LinkMLMeta</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>purpose</code>                 (<code>Optional[str]</code>)             </li> <li> <code>input</code>                 (<code>str</code>)             </li> <li> <code>option</code>                 (<code>Optional[Option]</code>)             </li> <li> <code>context</code>                 (<code>Optional[str]</code>)             </li> <li> <code>requires</code>                 (<code>Optional[Requires]</code>)             </li> </ul> Source code in <code>src/json_ld_test/models.py</code> <pre><code>class Test(ConfiguredBaseModel):\n    \"\"\"\n    Abstract parent class for all test cases.\n    \"\"\"\n    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'abstract': True, 'from_schema': 'https://w3c.github.io/json-ld-api/tests'})\n\n    name: str = Field(..., json_schema_extra = { \"linkml_meta\": {'alias': 'name', 'domain_of': ['Manifest', 'Test']} })\n    purpose: Optional[str] = Field(None, json_schema_extra = { \"linkml_meta\": {'alias': 'purpose', 'domain_of': ['Test']} })\n    input: str = Field(..., json_schema_extra = { \"linkml_meta\": {'alias': 'input', 'domain_of': ['Test']} })\n    option: Optional[Option] = Field(None, json_schema_extra = { \"linkml_meta\": {'alias': 'option', 'domain_of': ['Test']} })\n    context: Optional[str] = Field(None, json_schema_extra = { \"linkml_meta\": {'alias': 'context', 'domain_of': ['Test']} })\n    requires: Optional[Requires] = Field(None, json_schema_extra = { \"linkml_meta\": {'alias': 'requires', 'domain_of': ['Test']} })\n</code></pre>"},{"location":"#json_ld_test.models.Option","title":"<code>json_ld_test.models.Option</code>  <code>pydantic-model</code>","text":"<p>               Bases: <code>ConfiguredBaseModel</code></p> <p>Captures all extra options that can be passed to a test.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"SpecVersion\": {\n      \"enum\": [\n        \"json-ld-1.0\",\n        \"json-ld-1.1\"\n      ],\n      \"title\": \"SpecVersion\",\n      \"type\": \"string\"\n    }\n  },\n  \"additionalProperties\": false,\n  \"description\": \"Captures all extra options that can be passed to a test.\",\n  \"properties\": {\n    \"specVersion\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/SpecVersion\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"linkml_meta\": {\n        \"alias\": \"specVersion\",\n        \"domain_of\": [\n          \"Option\"\n        ]\n      }\n    },\n    \"processingMode\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/SpecVersion\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"linkml_meta\": {\n        \"alias\": \"processingMode\",\n        \"domain_of\": [\n          \"Option\"\n        ]\n      }\n    },\n    \"base\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"linkml_meta\": {\n        \"alias\": \"base\",\n        \"domain_of\": [\n          \"Option\"\n        ]\n      },\n      \"title\": \"Base\"\n    },\n    \"normative\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"linkml_meta\": {\n        \"alias\": \"normative\",\n        \"domain_of\": [\n          \"Option\"\n        ]\n      },\n      \"title\": \"Normative\"\n    },\n    \"expandContext\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"linkml_meta\": {\n        \"alias\": \"expandContext\",\n        \"domain_of\": [\n          \"Option\"\n        ]\n      },\n      \"title\": \"Expandcontext\"\n    },\n    \"processorFeature\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"linkml_meta\": {\n        \"alias\": \"processorFeature\",\n        \"domain_of\": [\n          \"Option\"\n        ]\n      },\n      \"title\": \"Processorfeature\"\n    },\n    \"extractAllScripts\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"linkml_meta\": {\n        \"alias\": \"extractAllScripts\",\n        \"domain_of\": [\n          \"Option\"\n        ]\n      },\n      \"title\": \"Extractallscripts\"\n    },\n    \"contentType\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"linkml_meta\": {\n        \"alias\": \"contentType\",\n        \"domain_of\": [\n          \"Option\"\n        ]\n      },\n      \"title\": \"Contenttype\"\n    },\n    \"httpStatus\": {\n      \"anyOf\": [\n        {\n          \"type\": \"integer\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"linkml_meta\": {\n        \"alias\": \"httpStatus\",\n        \"domain_of\": [\n          \"Option\"\n        ]\n      },\n      \"title\": \"Httpstatus\"\n    },\n    \"redirectTo\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"linkml_meta\": {\n        \"alias\": \"redirectTo\",\n        \"domain_of\": [\n          \"Option\"\n        ]\n      },\n      \"title\": \"Redirectto\"\n    },\n    \"httpLink\": {\n      \"anyOf\": [\n        {},\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"linkml_meta\": {\n        \"alias\": \"httpLink\",\n        \"any_of\": [\n          {\n            \"multivalued\": true\n          },\n          {\n            \"multivalued\": false\n          }\n        ],\n        \"domain_of\": [\n          \"Option\"\n        ]\n      },\n      \"title\": \"Httplink\"\n    },\n    \"produceGeneralizedRdf\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"linkml_meta\": {\n        \"alias\": \"produceGeneralizedRdf\",\n        \"domain_of\": [\n          \"Option\"\n        ]\n      },\n      \"title\": \"Producegeneralizedrdf\"\n    },\n    \"compactToRelative\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"linkml_meta\": {\n        \"alias\": \"compactToRelative\",\n        \"domain_of\": [\n          \"Option\"\n        ]\n      },\n      \"title\": \"Compacttorelative\"\n    },\n    \"compactArrays\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"linkml_meta\": {\n        \"alias\": \"compactArrays\",\n        \"domain_of\": [\n          \"Option\"\n        ]\n      },\n      \"title\": \"Compactarrays\"\n    },\n    \"useNativeTypes\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"linkml_meta\": {\n        \"alias\": \"useNativeTypes\",\n        \"domain_of\": [\n          \"Option\"\n        ]\n      },\n      \"title\": \"Usenativetypes\"\n    },\n    \"rdfDirection\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"linkml_meta\": {\n        \"alias\": \"rdfDirection\",\n        \"domain_of\": [\n          \"Option\"\n        ]\n      },\n      \"title\": \"Rdfdirection\"\n    },\n    \"useRdfType\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"linkml_meta\": {\n        \"alias\": \"useRdfType\",\n        \"domain_of\": [\n          \"Option\"\n        ]\n      },\n      \"title\": \"Userdftype\"\n    },\n    \"useJCS\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"linkml_meta\": {\n        \"alias\": \"useJCS\",\n        \"domain_of\": [\n          \"Option\"\n        ]\n      },\n      \"title\": \"Usejcs\"\n    }\n  },\n  \"title\": \"Option\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>linkml_meta</code>                 (<code>LinkMLMeta</code>)             </li> <li> <code>specVersion</code>                 (<code>Optional[SpecVersion]</code>)             </li> <li> <code>processingMode</code>                 (<code>Optional[SpecVersion]</code>)             </li> <li> <code>base</code>                 (<code>Optional[str]</code>)             </li> <li> <code>normative</code>                 (<code>Optional[bool]</code>)             </li> <li> <code>expandContext</code>                 (<code>Optional[str]</code>)             </li> <li> <code>processorFeature</code>                 (<code>Optional[str]</code>)             </li> <li> <code>extractAllScripts</code>                 (<code>Optional[bool]</code>)             </li> <li> <code>contentType</code>                 (<code>Optional[str]</code>)             </li> <li> <code>httpStatus</code>                 (<code>Optional[int]</code>)             </li> <li> <code>redirectTo</code>                 (<code>Optional[str]</code>)             </li> <li> <code>httpLink</code>                 (<code>Optional[Any]</code>)             </li> <li> <code>produceGeneralizedRdf</code>                 (<code>Optional[bool]</code>)             </li> <li> <code>compactToRelative</code>                 (<code>Optional[bool]</code>)             </li> <li> <code>compactArrays</code>                 (<code>Optional[bool]</code>)             </li> <li> <code>useNativeTypes</code>                 (<code>Optional[bool]</code>)             </li> <li> <code>rdfDirection</code>                 (<code>Optional[str]</code>)             </li> <li> <code>useRdfType</code>                 (<code>Optional[bool]</code>)             </li> <li> <code>useJCS</code>                 (<code>Optional[bool]</code>)             </li> </ul> Source code in <code>src/json_ld_test/models.py</code> <pre><code>class Option(ConfiguredBaseModel):\n    \"\"\"\n    Captures all extra options that can be passed to a test.\n    \"\"\"\n    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'from_schema': 'https://w3c.github.io/json-ld-api/tests'})\n\n    specVersion: Optional[SpecVersion] = Field(None, json_schema_extra = { \"linkml_meta\": {'alias': 'specVersion', 'domain_of': ['Option']} })\n    processingMode: Optional[SpecVersion] = Field(None, json_schema_extra = { \"linkml_meta\": {'alias': 'processingMode', 'domain_of': ['Option']} })\n    base: Optional[str] = Field(None, json_schema_extra = { \"linkml_meta\": {'alias': 'base', 'domain_of': ['Option']} })\n    normative: Optional[bool] = Field(None, json_schema_extra = { \"linkml_meta\": {'alias': 'normative', 'domain_of': ['Option']} })\n    expandContext: Optional[str] = Field(None, json_schema_extra = { \"linkml_meta\": {'alias': 'expandContext', 'domain_of': ['Option']} })\n    processorFeature: Optional[str] = Field(None, json_schema_extra = { \"linkml_meta\": {'alias': 'processorFeature', 'domain_of': ['Option']} })\n    extractAllScripts: Optional[bool] = Field(None, json_schema_extra = { \"linkml_meta\": {'alias': 'extractAllScripts', 'domain_of': ['Option']} })\n    contentType: Optional[str] = Field(None, json_schema_extra = { \"linkml_meta\": {'alias': 'contentType', 'domain_of': ['Option']} })\n    httpStatus: Optional[int] = Field(None, json_schema_extra = { \"linkml_meta\": {'alias': 'httpStatus', 'domain_of': ['Option']} })\n    redirectTo: Optional[str] = Field(None, json_schema_extra = { \"linkml_meta\": {'alias': 'redirectTo', 'domain_of': ['Option']} })\n    httpLink: Optional[Any] = Field(None, json_schema_extra = { \"linkml_meta\": {'alias': 'httpLink',\n         'any_of': [{'multivalued': True}, {'multivalued': False}],\n         'domain_of': ['Option']} })\n    produceGeneralizedRdf: Optional[bool] = Field(None, json_schema_extra = { \"linkml_meta\": {'alias': 'produceGeneralizedRdf', 'domain_of': ['Option']} })\n    compactToRelative: Optional[bool] = Field(None, json_schema_extra = { \"linkml_meta\": {'alias': 'compactToRelative', 'domain_of': ['Option']} })\n    compactArrays: Optional[bool] = Field(None, json_schema_extra = { \"linkml_meta\": {'alias': 'compactArrays', 'domain_of': ['Option']} })\n    useNativeTypes: Optional[bool] = Field(None, json_schema_extra = { \"linkml_meta\": {'alias': 'useNativeTypes', 'domain_of': ['Option']} })\n    rdfDirection: Optional[str] = Field(None, json_schema_extra = { \"linkml_meta\": {'alias': 'rdfDirection', 'domain_of': ['Option']} })\n    useRdfType: Optional[bool] = Field(None, json_schema_extra = { \"linkml_meta\": {'alias': 'useRdfType', 'domain_of': ['Option']} })\n    useJCS: Optional[bool] = Field(None, json_schema_extra = { \"linkml_meta\": {'alias': 'useJCS', 'domain_of': ['Option']} })\n</code></pre>"},{"location":"#json_ld_test.models.Requires","title":"<code>json_ld_test.models.Requires</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> Source code in <code>src/json_ld_test/models.py</code> <pre><code>class Requires(str, Enum):\n    I18nDatatype = \"I18nDatatype\"\n    CompoundLiteral = \"CompoundLiteral\"\n    GeneralizedRdf = \"GeneralizedRdf\"\n</code></pre>"},{"location":"#json_ld_test.load.ManifestType","title":"<code>json_ld_test.load.ManifestType: TypeAlias = Literal['compact', 'expand', 'flatten', 'fromRdf', 'toRdf', 'html', 'remote-doc']</code>  <code>module-attribute</code>","text":""}]}